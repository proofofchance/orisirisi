{
  "address": "0x42c95416B24046031310029a0531BA49592bAcbF",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorizedApp",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Credit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "app",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreditFromGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Debit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "app",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebitForGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "app",
          "type": "address"
        }
      ],
      "name": "addApp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "credit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "creditPlayer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        }
      ],
      "name": "creditPlayers",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "creditPlayersAndCreditAppOwnerTheRest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "debitForGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "app",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        }
      ],
      "name": "getGameBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "app",
          "type": "address"
        }
      ],
      "name": "removeApp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7a362434b55bafbb23de12eb634a02a928d17a4e20d20281851faa185b92eb3c",
  "receipt": {
    "to": null,
    "from": "0x9B54b2B5Acf909692A762f017724a4574d7b6a2a",
    "contractAddress": "0x42c95416B24046031310029a0531BA49592bAcbF",
    "transactionIndex": 168,
    "gasUsed": "1416505",
    "logsBloom": "0x
    "blockHash": "0x68a3be138e1fa2be1f571475539ae46556cfea4db08089912ec897de11a6d95a",
    "transactionHash": "0x7a362434b55bafbb23de12eb634a02a928d17a4e20d20281851faa185b92eb3c",
    "logs": [
      {
        "transactionIndex": 168,
        "blockNumber": 5234697,
        "transactionHash": "0x7a362434b55bafbb23de12eb634a02a928d17a4e20d20281851faa185b92eb3c",
        "address": "0x42c95416B24046031310029a0531BA49592bAcbF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009b54b2b5acf909692a762f017724a4574d7b6a2a"
        ],
        "data": "0x",
        "logIndex": 235,
        "blockHash": "0x68a3be138e1fa2be1f571475539ae46556cfea4db08089912ec897de11a6d95a"
      }
    ],
    "blockNumber": 5234697,
    "cumulativeGasUsed": "14243306",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "612e5fb50ed619cbc3cf5642fdec7314",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorizedApp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditFromGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Debit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebitForGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"addApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"creditPlayer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"creditPlayers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"creditPlayersAndCreditAppOwnerTheRest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"debitForGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"getGameBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"removeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ProofOfChance Wallets supports only coinflip at the time of deployment It acts as a regular wallet that can be 'Credited' and 'Debited' More importantly, it allows ProofOfChance apps to 'CreditFromGame` or `DebitForGame` in the context of a given game\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"creditPlayer(address)\":{\"details\":\"Credits player as though player manually credits themselves.\"},\"creditPlayers(address[])\":{\"details\":\"Credits player as though player manually credits themselves.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"OwnableUnauthorizedAccount(address)\":[{\"notice\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"user\",\"methods\":{\"getBalance(address)\":{\"notice\":\"returns the balance of a wallet owner it does not include the balances deposited in games\"},\"getGameBalance(address,uint256)\":{\"notice\":\"Returns the wallet balance of an app's game\"},\"getTotalBalance()\":{\"notice\":\"returns the ether balance of this wallet contract\"},\"withdraw(uint256)\":{\"notice\":\"Allows you to withdraw a specified amount of your wallet balance\"},\"withdrawAll()\":{\"notice\":\"Allows you to withdraw all your wallet balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Wallets.sol\":\"Wallets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    /// The caller account is not authorized to perform an operation.\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev The owner is not a valid owner account.\\n    error OwnableInvalidOwner(address owner);\\n\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Internal function without access restriction.\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xf819cf6049b3648f37b34d16ec4ff0107d828e18d728a8c061faeabf6db180d4\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from './Ownable.sol';\\nimport {UsingReentrancyGuard} from './Wallets/ReentrancyGuard.sol';\\n\\n/// TODO: Move to orisirisi-contracts when more games are introduced\\n/// TODO: Consider renaming to GameWallets\\n\\n/// @dev ProofOfChance Wallets supports only coinflip at the time of deployment\\n/// It acts as a regular wallet that can be 'Credited' and 'Debited'\\n/// More importantly, it allows ProofOfChance apps to 'CreditFromGame` or `DebitForGame` in\\n/// the context of a given game\\ncontract Wallets is UsingReentrancyGuard, Ownable {\\n    mapping(address => bool) apps;\\n    mapping(address app => mapping(uint gameID => uint balance)) gameBalances;\\n    mapping(address owner => uint amount) balances;\\n\\n    event Credit(address indexed owner, uint amount);\\n    event Debit(address indexed owner, uint amount);\\n    event CreditFromGame(\\n        address indexed app,\\n        uint indexed gameID,\\n        address indexed owner,\\n        uint amount\\n    );\\n    event DebitForGame(\\n        address indexed app,\\n        uint indexed gameID,\\n        address indexed owner,\\n        uint amount\\n    );\\n\\n    error InsufficientFunds();\\n    error UnAuthorizedApp();\\n\\n    receive() external payable {\\n        _credit();\\n    }\\n\\n    function addApp(address app) external onlyOwner {\\n        apps[app] = true;\\n    }\\n\\n    function removeApp(address app) external onlyOwner {\\n        apps[app] = false;\\n    }\\n\\n    modifier onlyApp() {\\n        if (!apps[msg.sender]) {\\n            revert UnAuthorizedApp();\\n        }\\n        _;\\n    }\\n\\n    function debitForGame(\\n        uint gameID,\\n        address player,\\n        uint amount\\n    ) external onlyApp {\\n        if (balances[player] < amount) {\\n            revert InsufficientFunds();\\n        }\\n        balances[player] -= amount;\\n        address app = msg.sender;\\n        gameBalances[app][gameID] += amount;\\n\\n        emit DebitForGame(app, gameID, player, amount);\\n    }\\n\\n    /// @dev Credits player as though player manually credits themselves.\\n    function creditPlayer(address player) external payable {\\n        uint amount = msg.value;\\n        balances[player] += amount;\\n        emit Credit(player, amount);\\n    }\\n\\n    function credit() external payable {\\n        _credit();\\n    }\\n\\n    /// @dev Credits player as though player manually credits themselves.\\n    function creditPlayers(address[] memory players) external payable {\\n        uint amount = msg.value;\\n        uint playersSize = players.length;\\n        require(amount % playersSize == 0);\\n        uint amountForEachPlayer = amount / playersSize;\\n        for (uint i = 0; i < playersSize; i++) {\\n            balances[players[i]] += amountForEachPlayer;\\n        }\\n    }\\n\\n    function creditPlayersAndCreditAppOwnerTheRest(\\n        uint gameID,\\n        address[] memory players,\\n        uint amount\\n    ) external onlyApp {\\n        address app = msg.sender;\\n        require(gameBalances[app][gameID] > players.length * amount);\\n        creditPlayers(app, gameID, players, amount);\\n        creditAppOwnerTheRest(app, gameID);\\n    }\\n\\n    /// @notice Allows you to withdraw a specified amount of your wallet balance\\n    function withdraw(uint amount) external nonReentrant {\\n        address owner = msg.sender;\\n        uint balance = balances[owner];\\n        if (balance < amount) {\\n            revert InsufficientFunds();\\n        }\\n        balances[owner] -= amount;\\n\\n        pay(owner, amount);\\n\\n        emit Debit(owner, amount);\\n    }\\n\\n    /// @notice Allows you to withdraw all your wallet balance\\n    function withdrawAll() external nonReentrant {\\n        address owner = msg.sender;\\n        uint balance = balances[owner];\\n        if (balance == 0) {\\n            revert InsufficientFunds();\\n        }\\n        balances[owner] = 0;\\n\\n        pay(owner, balance);\\n\\n        emit Debit(owner, balance);\\n    }\\n\\n    /// @notice Returns the wallet balance of an app's game\\n    function getGameBalance(\\n        address app,\\n        uint gameID\\n    ) external view returns (uint) {\\n        return gameBalances[app][gameID];\\n    }\\n\\n    function _credit() private {\\n        address player = msg.sender;\\n        uint amount = msg.value;\\n        balances[player] += amount;\\n        emit Credit(player, amount);\\n    }\\n\\n    /// @notice returns the balance of a wallet owner\\n    /// it does not include the balances deposited in games\\n    function getBalance(address owner) external view returns (uint) {\\n        return balances[owner];\\n    }\\n\\n    /// @notice returns the ether balance of this wallet contract\\n    function getTotalBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function pay(address to, uint256 amount) private {\\n        (bool sent, ) = to.call{value: amount}('');\\n        require(sent);\\n    }\\n\\n    function creditPlayers(\\n        address app,\\n        uint gameID,\\n        address[] memory players,\\n        uint amount\\n    ) private {\\n        for (uint i = 0; i < players.length; i++) {\\n            address player = players[i];\\n            gameBalances[app][gameID] -= amount;\\n            balances[player] += amount;\\n            emit CreditFromGame(app, gameID, player, amount);\\n        }\\n    }\\n\\n    function creditAppOwnerTheRest(address app, uint gameID) private {\\n        uint restAmount = gameBalances[app][gameID];\\n        // Currently, all apps have one owner, who happens to own this wallet contract too\\n        address appOwner = owner();\\n        balances[appOwner] = restAmount;\\n        gameBalances[app][gameID] = 0;\\n        emit CreditFromGame(app, gameID, appOwner, restAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0748310ac4c0358bcbfbc0dfc4f156009b718ca04d0ad112c593d23ce42e86ef\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract UsingReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0cfe4707944d2f14e0c8b6a3ed44a9fec9f9060b15a53620cb0c57ec84b2ea98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506100283361002d60201b60201c565b6100f3565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6117d6806101026000396000f3fe6080604052600436106100e15760003560e01c806393ac9b161161007f578063c288e40411610059578063c288e4041461025c578063d0c6fdb714610285578063f2fde38b146102ae578063f8b2cb4f146102d7576100f0565b806393ac9b161461020d578063a06d083c14610236578063b820af4c14610240576100f0565b80632e1a7d4d116100bb5780632e1a7d4d1461016557806356ceece21461018e578063853828b6146101cb5780638da5cb5b146101e2576100f0565b8063037e34e5146100f557806312314e971461011e57806312b583491461013a576100f0565b366100f0576100ee610314565b005b600080fd5b34801561010157600080fd5b5061011c60048036038101906101179190611227565b6103c6565b005b6101386004803603810190610133919061127a565b6105f0565b005b34801561014657600080fd5b5061014f61069d565b60405161015c91906112b6565b60405180910390f35b34801561017157600080fd5b5061018c600480360381019061018791906112d1565b6106a5565b005b34801561019a57600080fd5b506101b560048036038101906101b091906112fe565b6107eb565b6040516101c291906112b6565b60405180910390f35b3480156101d757600080fd5b506101e0610846565b005b3480156101ee57600080fd5b506101f761097a565b604051610204919061134d565b60405180910390f35b34801561021957600080fd5b50610234600480360381019061022f919061127a565b6109a4565b005b61023e610a07565b005b61025a600480360381019061025591906114c1565b610a11565b005b34801561026857600080fd5b50610283600480360381019061027e919061150a565b610ad9565b005b34801561029157600080fd5b506102ac60048036038101906102a7919061127a565b610be5565b005b3480156102ba57600080fd5b506102d560048036038101906102d0919061127a565b610c48565b005b3480156102e357600080fd5b506102fe60048036038101906102f9919061127a565b610c5c565b60405161030b91906112b6565b60405180910390f35b6000339050600034905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461036d91906115a8565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f1bbf55d483639f8103dc4e035af71a4fbdb16c80be740fa3eef81198acefa094826040516103ba91906112b6565b60405180910390a25050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610449576040517f1ef0332e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104c2576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051191906115dc565b92505081905550600033905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020600082825461057d91906115a8565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16848273ffffffffffffffffffffffffffffffffffffffff167f41a1d93164b85ee22290546a8988d6cea30a2fce0a7d4ac0694467f73cba35b1856040516105e291906112b6565b60405180910390a450505050565b600034905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461064491906115a8565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f1bbf55d483639f8103dc4e035af71a4fbdb16c80be740fa3eef81198acefa0948260405161069191906112b6565b60405180910390a25050565b600047905090565b6106ad610ca5565b60003390506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610730576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461077f91906115dc565b925050819055506107908284610ceb565b8173ffffffffffffffffffffffffffffffffffffffff167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc6046846040516107d691906112b6565b60405180910390a250506107e8610d66565b50565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61084e610ca5565b60003390506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081036108d1576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109208282610ceb565b8173ffffffffffffffffffffffffffffffffffffffff167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc60468260405161096691906112b6565b60405180910390a25050610978610d66565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109ac610d70565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610a0f610314565b565b600034905060008251905060008183610a2a919061163f565b14610a3457600080fd5b60008183610a429190611670565b905060005b82811015610ad2578160046000878481518110610a6757610a666116a1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ab891906115a8565b925050819055508080610aca906116d0565b915050610a47565b5050505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b5c576040517f1ef0332e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339050818351610b6e9190611718565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205411610bc957600080fd5b610bd581858585610de9565b610bdf8185610f52565b50505050565b610bed610d70565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610c50610d70565b610c59816110b9565b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260005403610ce1576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610d119061178b565b60006040518083038185875af1925050503d8060008114610d4e576040519150601f19603f3d011682016040523d82523d6000602084013e610d53565b606091505b5050905080610d6157600080fd5b505050565b6001600081905550565b3373ffffffffffffffffffffffffffffffffffffffff16610d8f61097a565b73ffffffffffffffffffffffffffffffffffffffff1614610de757336040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610dde919061134d565b60405180910390fd5b565b60005b8251811015610f4b576000838281518110610e0a57610e096116a1565b5b6020026020010151905082600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206000828254610e7491906115dc565b9250508190555082600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610eca91906115a8565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16858773ffffffffffffffffffffffffffffffffffffffff167f66146bebca25df9b39213211f3772ec0db2654a806515a04a19a5494cbd3e2cc86604051610f2f91906112b6565b60405180910390a4508080610f43906116d0565b915050610dec565b5050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000610fb161097a565b905081600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f66146bebca25df9b39213211f3772ec0db2654a806515a04a19a5494cbd3e2cc856040516110ab91906112b6565b60405180910390a450505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6111a681611193565b81146111b157600080fd5b50565b6000813590506111c38161119d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111f4826111c9565b9050919050565b611204816111e9565b811461120f57600080fd5b50565b600081359050611221816111fb565b92915050565b6000806000606084860312156112405761123f611189565b5b600061124e868287016111b4565b935050602061125f86828701611212565b9250506040611270868287016111b4565b9150509250925092565b6000602082840312156112905761128f611189565b5b600061129e84828501611212565b91505092915050565b6112b081611193565b82525050565b60006020820190506112cb60008301846112a7565b92915050565b6000602082840312156112e7576112e6611189565b5b60006112f5848285016111b4565b91505092915050565b6000806040838503121561131557611314611189565b5b600061132385828601611212565b9250506020611334858286016111b4565b9150509250929050565b611347816111e9565b82525050565b6000602082019050611362600083018461133e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113b68261136d565b810181811067ffffffffffffffff821117156113d5576113d461137e565b5b80604052505050565b60006113e861117f565b90506113f482826113ad565b919050565b600067ffffffffffffffff8211156114145761141361137e565b5b602082029050602081019050919050565b600080fd5b600061143d611438846113f9565b6113de565b905080838252602082019050602084028301858111156114605761145f611425565b5b835b8181101561148957806114758882611212565b845260208401935050602081019050611462565b5050509392505050565b600082601f8301126114a8576114a7611368565b5b81356114b884826020860161142a565b91505092915050565b6000602082840312156114d7576114d6611189565b5b600082013567ffffffffffffffff8111156114f5576114f461118e565b5b61150184828501611493565b91505092915050565b60008060006060848603121561152357611522611189565b5b6000611531868287016111b4565b935050602084013567ffffffffffffffff8111156115525761155161118e565b5b61155e86828701611493565b925050604061156f868287016111b4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115b382611193565b91506115be83611193565b92508282019050808211156115d6576115d5611579565b5b92915050565b60006115e782611193565b91506115f283611193565b925082820390508181111561160a57611609611579565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061164a82611193565b915061165583611193565b92508261166557611664611610565b5b828206905092915050565b600061167b82611193565b915061168683611193565b92508261169657611695611610565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006116db82611193565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361170d5761170c611579565b5b600182019050919050565b600061172382611193565b915061172e83611193565b925082820261173c81611193565b9150828204841483151761175357611752611579565b5b5092915050565b600081905092915050565b50565b600061177560008361175a565b915061178082611765565b600082019050919050565b600061179682611768565b915081905091905056fea2646970667358221220f9b9c80ed4dbdccd1c7dcef359e286c668e243913957d54fba5c25e033fc7a5264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "ProofOfChance Wallets supports only coinflip at the time of deployment It acts as a regular wallet that can be 'Credited' and 'Debited' More importantly, it allows ProofOfChance apps to 'CreditFromGame` or `DebitForGame` in the context of a given game",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "creditPlayer(address)": {
        "details": "Credits player as though player manually credits themselves."
      },
      "creditPlayers(address[])": {
        "details": "Credits player as though player manually credits themselves."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OwnableUnauthorizedAccount(address)": [
        {
          "notice": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getBalance(address)": {
        "notice": "returns the balance of a wallet owner it does not include the balances deposited in games"
      },
      "getGameBalance(address,uint256)": {
        "notice": "Returns the wallet balance of an app's game"
      },
      "getTotalBalance()": {
        "notice": "returns the ether balance of this wallet contract"
      },
      "withdraw(uint256)": {
        "notice": "Allows you to withdraw a specified amount of your wallet balance"
      },
      "withdrawAll()": {
        "notice": "Allows you to withdraw all your wallet balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9995,
        "contract": "src/Wallets.sol:Wallets",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9249,
        "contract": "src/Wallets.sol:Wallets",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9445,
        "contract": "src/Wallets.sol:Wallets",
        "label": "apps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9451,
        "contract": "src/Wallets.sol:Wallets",
        "label": "gameBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9455,
        "contract": "src/Wallets.sol:Wallets",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}