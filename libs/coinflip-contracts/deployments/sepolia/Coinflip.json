{
  "address": "0x6b15A85CE56b806a103d803eE481096805045F88",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallets_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "maxNumberOfPlayers_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "minWager_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum Coin.Side",
          "name": "availableCoinSide",
          "type": "uint8"
        }
      ],
      "name": "AllMatchingPlaysError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "playID",
          "type": "uint16"
        }
      ],
      "name": "AlreadyPlayedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InOperational",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectGameWager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpiryTimestamp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum Game.Status",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "enum Game.Status",
          "name": "actual",
          "type": "uint8"
        }
      ],
      "name": "InvalidGameStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProofOfChance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidServiceChargePercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxNumberOfPlayersError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumWagerNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmountPerPlayer",
          "type": "uint256"
        }
      ],
      "name": "ExpiredGameRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForEachWinner",
          "type": "uint256"
        }
      ],
      "name": "GameCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "numberOfPlayers",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "GameExpiryAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "gamePlayID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "chanceAndSalt",
          "type": "bytes"
        }
      ],
      "name": "GamePlayChanceRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "gamePlayID",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "GamePlayCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newExpiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adjustExpiryForGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "gameIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "newExpiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "adjustExpiryForGames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "numberOfPlayers",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getServiceCharge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceProviderWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWager",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        }
      ],
      "name": "playCounts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "playCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "playID",
          "type": "uint16"
        }
      ],
      "name": "proofOfChances",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        }
      ],
      "name": "refundExpiredGamePlayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "gameIDs",
          "type": "uint256[]"
        }
      ],
      "name": "refundExpiredGamePlayersForAllGames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "chanceAndSalts",
          "type": "bytes[]"
        }
      ],
      "name": "revealChancesAndCreditWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceChargePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOperational_",
          "type": "bool"
        }
      ],
      "name": "setIsOperational",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "maxNumberOfPlayers_",
          "type": "uint16"
        }
      ],
      "name": "updateMaxNumberOfPlayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minWager_",
          "type": "uint256"
        }
      ],
      "name": "updateMinWagerPerGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "serviceChargePercent_",
          "type": "uint8"
        }
      ],
      "name": "updateServiceChargePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallets_",
          "type": "address"
        }
      ],
      "name": "updateWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallets",
      "outputs": [
        {
          "internalType": "contract Wallets",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04772d70f9769759cea1da46836bf90e64e243617adbdc6eff5548e547e95c97",
  "receipt": {
    "to": null,
    "from": "0x0be2eaD2AC7b1B8cf06DAE5C3FdE368f7D65B72A",
    "contractAddress": "0x6b15A85CE56b806a103d803eE481096805045F88",
    "transactionIndex": 80,
    "gasUsed": "1658621",
    "logsBloom": "0x
    "blockHash": "0x1270e3f707c956a4200a7882c3700014bdefeaa5a8fc457979c5516bf0dc267b",
    "transactionHash": "0x04772d70f9769759cea1da46836bf90e64e243617adbdc6eff5548e547e95c97",
    "logs": [
      {
        "transactionIndex": 80,
        "blockNumber": 5497825,
        "transactionHash": "0x04772d70f9769759cea1da46836bf90e64e243617adbdc6eff5548e547e95c97",
        "address": "0x6b15A85CE56b806a103d803eE481096805045F88",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000be2ead2ac7b1b8cf06dae5c3fde368f7d65b72a"
        ],
        "data": "0x",
        "logIndex": 385,
        "blockHash": "0x1270e3f707c956a4200a7882c3700014bdefeaa5a8fc457979c5516bf0dc267b"
      }
    ],
    "blockNumber": 5497825,
    "cumulativeGasUsed": "12875508",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xef9afc5D6c634E34c4a46121351Af37B0fd089bd",
    120,
    "40000000000000000"
  ],
  "numDeployments": 10,
  "solcInputHash": "b3c8bd09f4aa1256bf5db02e09564c5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallets_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"maxNumberOfPlayers_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minWager_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum Coin.Side\",\"name\":\"availableCoinSide\",\"type\":\"uint8\"}],\"name\":\"AllMatchingPlaysError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"playID\",\"type\":\"uint16\"}],\"name\":\"AlreadyPlayedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InOperational\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectGameWager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Game.Status\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"enum Game.Status\",\"name\":\"actual\",\"type\":\"uint8\"}],\"name\":\"InvalidGameStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProofOfChance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidServiceChargePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxNumberOfPlayersError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumWagerNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmountPerPlayer\",\"type\":\"uint256\"}],\"name\":\"ExpiredGameRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForEachWinner\",\"type\":\"uint256\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"numberOfPlayers\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"GameExpiryAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"gamePlayID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"chanceAndSalt\",\"type\":\"bytes\"}],\"name\":\"GamePlayChanceRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"gamePlayID\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"GamePlayCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExpiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"adjustExpiryForGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gameIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"newExpiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"adjustExpiryForGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numberOfPlayers\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getServiceCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceProviderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"playCounts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"playCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"playID\",\"type\":\"uint16\"}],\"name\":\"proofOfChances\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"refundExpiredGamePlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gameIDs\",\"type\":\"uint256[]\"}],\"name\":\"refundExpiredGamePlayersForAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"chanceAndSalts\",\"type\":\"bytes[]\"}],\"name\":\"revealChancesAndCreditWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceChargePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOperational_\",\"type\":\"bool\"}],\"name\":\"setIsOperational\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxNumberOfPlayers_\",\"type\":\"uint16\"}],\"name\":\"updateMaxNumberOfPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWager_\",\"type\":\"uint256\"}],\"name\":\"updateMinWagerPerGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"serviceChargePercent_\",\"type\":\"uint8\"}],\"name\":\"updateServiceChargePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallets_\",\"type\":\"address\"}],\"name\":\"updateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"contract Wallets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account.\"}]},\"kind\":\"dev\",\"methods\":{\"createGame(uint16,uint256,uint8,bytes32)\":{\"params\":{\"coinSide\":\"predicted coin side by you, the creator\",\"expiryTimestamp\":\"Expiry timestamp of the game\",\"numberOfPlayers\":\"number of participating players\",\"proofOfChance\":\"SHA256 hash of your chance (lucky word[s]) and a random salt combined\"}},\"getServiceProviderWallet()\":{\"details\":\"Returns the service provider wallet owner\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"playGame(uint256,uint8,bytes32)\":{\"params\":{\"coinSide\":\"coin side outcome prediction\",\"gameID\":\"already created game ID\",\"proofOfChance\":\"SHA256 hash of your chance (lucky word[s]) and a random salt combined\"}},\"refundExpiredGamePlayers(uint256)\":{\"params\":{\"gameID\":\"game ID of expired game\"}},\"refundExpiredGamePlayersForAllGames(uint256[])\":{\"params\":{\"gameIDs\":\"game IDs of expired games\"}},\"revealChancesAndCreditWinners(uint256,bytes[])\":{\"params\":{\"chanceAndSalts\":\"list of the chance and salts combined in the order of their respecitive play IDs\",\"gameID\":\"already created game ID\"}},\"setIsOperational(bool)\":{\"details\":\"Sets contract operations on/off When isOperational is false, all affected write transactions except for this one will fail\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"OwnableUnauthorizedAccount(address)\":[{\"notice\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"user\",\"methods\":{\"createGame(uint16,uint256,uint8,bytes32)\":{\"notice\":\"Creates a new game\"},\"getTotalBalance()\":{\"notice\":\"returns the ether balance of this contract i.e. total wagers staked\"},\"playGame(uint256,uint8,bytes32)\":{\"notice\":\"Allows playing an already created game\"},\"refundExpiredGamePlayers(uint256)\":{\"notice\":\"Refund wagers of an expired game to its players\"},\"refundExpiredGamePlayersForAllGames(uint256[])\":{\"notice\":\"Batch refunds expired game players\"},\"revealChancesAndCreditWinners(uint256,bytes[])\":{\"notice\":\"Reveals the chances (lucky words) of all plays for a given game. After, it computes and stores the coinflip outcome for the given game. Then, it credits players that predicted the coinflip outcome correctly with the combined wager shared equally (after service charge deduction)\"},\"updateMaxNumberOfPlayers(uint16)\":{\"notice\":\"Updates max number of players to avoid concluding games with very high gas fee\"},\"updateMinWagerPerGame(uint256)\":{\"notice\":\"Updates min wager allowed\"},\"updateWallets(address)\":{\"notice\":\"Allow updating Wallets conrtact in case a PPV is ever discovered\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Coinflip.sol\":\"Coinflip\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/Coinflip.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Coin} from './Coinflip/Coin.sol';\\nimport {Game} from './Coinflip/Game.sol';\\nimport {UsingGamePlays} from './Coinflip/GamePlays.sol';\\nimport {UsingGameStatuses} from './Coinflip/GameStatuses.sol';\\n\\nimport {Wallets} from './Wallets.sol';\\nimport {Ownable} from './Ownable.sol';\\nimport {MaybeOperational} from './MaybeOperational.sol';\\nimport {UsingServiceProvider} from './ServiceProvider.sol';\\n\\ncontract Coinflip is\\n    UsingGamePlays,\\n    UsingGameStatuses,\\n    Ownable,\\n    MaybeOperational,\\n    UsingServiceProvider\\n{\\n    uint public minWager;\\n    mapping(uint gameID => uint wager) wagers;\\n    uint16 public maxNumberOfPlayers;\\n    uint public gamesCount;\\n    Wallets public wallets;\\n\\n    event GameCreated(\\n        uint indexed gameID,\\n        address indexed creator,\\n        uint16 numberOfPlayers,\\n        uint expiryTimestamp,\\n        uint wager\\n    );\\n    event GamePlayChanceRevealed(\\n        uint indexed gameID,\\n        uint16 indexed gamePlayID,\\n        bytes chanceAndSalt\\n    );\\n    event GameCompleted(\\n        uint indexed gameID,\\n        Coin.Side coinSide,\\n        uint amountForEachWinner\\n    );\\n    event ExpiredGameRefunded(\\n        uint indexed gameID,\\n        uint refundedAmountPerPlayer\\n    );\\n    event GameExpiryAdjusted(uint indexed gameID, uint expiryTimestamp);\\n\\n    error IncorrectGameWager();\\n    error MinimumWagerNotMet();\\n    error InvalidProofOfChance();\\n    error MaxNumberOfPlayersError();\\n\\n    constructor(\\n        address payable wallets_,\\n        uint16 maxNumberOfPlayers_,\\n        uint minWager_\\n    ) {\\n        wallets = Wallets(wallets_);\\n        maxNumberOfPlayers = maxNumberOfPlayers_;\\n        minWager = minWager_;\\n    }\\n\\n    /// @notice Coinflip tops up your wallet balance when it receives any ether value\\n    receive() external payable {\\n        wallets.creditAccount{value: msg.value}(msg.sender);\\n    }\\n\\n    /// @notice Allow updating Wallets conrtact in case a PPV is ever discovered\\n    function updateWallets(address payable wallets_) external onlyOwner {\\n        wallets = Wallets(wallets_);\\n    }\\n\\n    /// @notice Updates max number of players to avoid concluding games with very high gas fee\\n    function updateMaxNumberOfPlayers(\\n        uint16 maxNumberOfPlayers_\\n    ) external onlyOwner {\\n        maxNumberOfPlayers = maxNumberOfPlayers_;\\n    }\\n\\n    /// @notice Updates min wager allowed\\n    function updateMinWagerPerGame(uint minWager_) external onlyOwner {\\n        minWager = minWager_;\\n    }\\n\\n    /// @notice Creates a new game\\n    /// @param numberOfPlayers number of participating players\\n    /// @param expiryTimestamp Expiry timestamp of the game\\n    /// @param coinSide predicted coin side by you, the creator\\n    /// @param proofOfChance SHA256 hash of your chance (lucky word[s]) and a random salt combined\\n    function createGame(\\n        uint16 numberOfPlayers,\\n        uint expiryTimestamp,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    ) external payable mustBeOperational {\\n        uint wager = msg.value;\\n        if (wager < minWager) {\\n            revert MinimumWagerNotMet();\\n        }\\n\\n        require(numberOfPlayers >= Coin.TOTAL_SIDES_COUNT);\\n\\n        if (numberOfPlayers > maxNumberOfPlayers) {\\n            revert MaxNumberOfPlayersError();\\n        }\\n\\n        uint newGameID = ++gamesCount;\\n        wagers[newGameID] = wager;\\n        setNumberOfPlayers(newGameID, numberOfPlayers);\\n        setGameExpiry(newGameID, expiryTimestamp);\\n\\n        address player = msg.sender;\\n        emit GameCreated(\\n            newGameID,\\n            player,\\n            numberOfPlayers,\\n            expiryTimestamp,\\n            wager\\n        );\\n        createGamePlay(player, newGameID, coinSide, proofOfChance);\\n    }\\n\\n    /// @notice Allows playing an already created game\\n    /// @param gameID already created game ID\\n    /// @param coinSide coin side outcome prediction\\n    /// @param proofOfChance SHA256 hash of your chance (lucky word[s]) and a random salt combined\\n    function playGame(\\n        uint gameID,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    )\\n        external\\n        payable\\n        mustBeOperational\\n        mustMatchGameStatus(gameID, Game.Status.AwaitingPlayers)\\n        mustAvoidAllGamePlaysMatching(gameID, coinSide)\\n        mustAvoidPlayingAgain(gameID)\\n    {\\n        uint wager = wagers[gameID];\\n        if (msg.value != wager) {\\n            revert IncorrectGameWager();\\n        }\\n        createGamePlay(msg.sender, gameID, coinSide, proofOfChance);\\n        maybeSetGameStatusAsAwaitingChancesUpload(gameID);\\n    }\\n\\n    /// @notice Reveals the chances (lucky words) of all plays for a given game.\\n    /// After, it computes and stores the coinflip outcome for the given game.\\n    /// Then, it credits players that predicted the coinflip outcome correctly with the combined\\n    /// wager shared equally (after service charge deduction)\\n    /// @param gameID already created game ID\\n    /// @param chanceAndSalts list of the chance and salts combined in the order of their respecitive play IDs\\n    function revealChancesAndCreditWinners(\\n        uint gameID,\\n        bytes[] calldata chanceAndSalts\\n    )\\n        external\\n        onlyOwner\\n        mustMatchGameStatus(gameID, Game.Status.AwaitingChancesUpload)\\n    {\\n        Coin.Side flipOutcome;\\n        for (uint16 i; i < playCounts[gameID]; ) {\\n            bytes calldata chanceAndSalt = chanceAndSalts[i];\\n\\n            uint16 gamePlayID = i + 1;\\n\\n            if (sha256(chanceAndSalt) != proofOfChances[gameID][gamePlayID]) {\\n                revert InvalidProofOfChance();\\n            }\\n\\n            (bytes16 chance, ) = abi.decode(chanceAndSalt, (bytes16, bytes8));\\n\\n            for (uint8 j; j < 16; ) {\\n                bytes1 chance_character = chance[j];\\n                if (chance_character == 0) {\\n                    break;\\n                }\\n\\n                unchecked {\\n                    if (flipOutcome == Coin.Side.Head) {\\n                        flipOutcome = Coin.Side.Tail;\\n                    } else {\\n                        flipOutcome = Coin.Side.Head;\\n                    }\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            emit GamePlayChanceRevealed(gameID, gamePlayID, chanceAndSalt);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        address[] memory winners = players[gameID][flipOutcome];\\n        uint amountForEachWinner = creditGameWinners(gameID, winners);\\n        setGameStatus(gameID, Game.Status.Concluded);\\n        emit GameCompleted(gameID, flipOutcome, amountForEachWinner);\\n    }\\n\\n    /// @notice Batch refunds expired game players\\n    /// @param gameIDs game IDs of expired games\\n    function refundExpiredGamePlayersForAllGames(\\n        uint[] calldata gameIDs\\n    ) external onlyOwner {\\n        for (uint8 i; i < gameIDs.length; ) {\\n            _refundExpiredGamePlayers(gameIDs[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Refund wagers of an expired game to its players\\n    /// @param gameID game ID of expired game\\n    function refundExpiredGamePlayers(uint gameID) public onlyOwner {\\n        _refundExpiredGamePlayers(gameID);\\n    }\\n\\n    function adjustExpiryForGame(\\n        uint gameID,\\n        uint newExpiryTimestamp\\n    ) external onlyOwner {\\n        setGameExpiry(gameID, newExpiryTimestamp);\\n        emit GameExpiryAdjusted(gameID, newExpiryTimestamp);\\n    }\\n\\n    function adjustExpiryForGames(\\n        uint[] calldata gameIDs,\\n        uint newExpiryTimestamp\\n    ) external onlyOwner {\\n        for (uint8 i; i < gameIDs.length; ) {\\n            uint gameID = gameIDs[i];\\n\\n            setGameExpiry(gameID, newExpiryTimestamp);\\n            emit GameExpiryAdjusted(gameID, newExpiryTimestamp);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice returns the ether balance of this contract i.e. total wagers staked\\n    function getTotalBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function creditGameWinners(\\n        uint gameID,\\n        address[] memory winners\\n    ) private returns (uint amountForEachWinner) {\\n        uint gameWager = wagers[gameID];\\n        uint totalWager = gameWager * playCounts[gameID];\\n        (\\n            uint amountForEachPlayer,\\n            uint serviceChargeAmount\\n        ) = getSplitAndServiceChargeAmounts(totalWager, winners.length);\\n        wallets.creditManyAndOne{value: totalWager}(\\n            winners,\\n            amountForEachPlayer,\\n            owner(),\\n            serviceChargeAmount\\n        );\\n        return amountForEachPlayer;\\n    }\\n\\n    function _refundExpiredGamePlayers(\\n        uint gameID\\n    ) private mustMatchGameStatus(gameID, Game.Status.Expired) {\\n        address[] memory allPlayers = allPlayers[gameID];\\n        uint16 allPlayersLength = uint16(allPlayers.length);\\n        uint totalWager = wagers[gameID] * allPlayersLength;\\n        (\\n            uint refundAmountPerPlayer,\\n            uint serviceChargeAmount\\n        ) = getSplitAndServiceChargeAmounts(totalWager, allPlayersLength);\\n        wallets.creditManyAndOne{value: totalWager}(\\n            allPlayers,\\n            refundAmountPerPlayer,\\n            owner(),\\n            serviceChargeAmount\\n        );\\n        setGameStatus(gameID, Game.Status.Concluded);\\n        emit ExpiredGameRefunded(gameID, refundAmountPerPlayer);\\n    }\\n\\n    function maybeSetGameStatusAsAwaitingChancesUpload(uint gameID) private {\\n        uint16 playCount = playCounts[gameID];\\n        uint16 numberOfPlayers = numberOfPlayersPerGame[gameID];\\n\\n        if (playCount == numberOfPlayers) {\\n            setGameStatus(gameID, Game.Status.AwaitingChancesUpload);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cdfbeb5e4a0ac9919f8d890b1a534aacc08fb08cc8b93da8fd18c6f6ac2cd13\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/Coin.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nlibrary Coin {\\n    enum Side {\\n        Head,\\n        Tail\\n    }\\n\\n    uint8 public constant TOTAL_SIDES_COUNT = 2;\\n}\\n\",\"keccak256\":\"0x5fe40b135d67779fb0b73766c1a8f844146f870b59dcdbbcded168cdfb392aa5\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/Game.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Coin} from './Coin.sol';\\n\\nlibrary Game {\\n    enum Status {\\n        AwaitingPlayers,\\n        Expired,\\n        AwaitingChancesUpload,\\n        /// Concluded games are Completed/Expired games have been paid_out/refunded\\n        Concluded\\n    }\\n}\\n\",\"keccak256\":\"0x0c131c7e5a498b3cc56c5167972a3c9c74353539a42592f328c29248f83339f3\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/GamePlays.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Coin} from './Coin.sol';\\nimport {Game} from './Game.sol';\\n\\ncontract UsingGamePlays {\\n    mapping(uint gameID => mapping(address player => uint16 playID)) playRecord;\\n    mapping(uint gameID => uint16 playCount) public playCounts;\\n    mapping(uint gameID => uint16 numberOfPlayers) numberOfPlayersPerGame;\\n    mapping(uint gameID => mapping(Coin.Side coinSide => address[] player)) players;\\n    mapping(uint gameID => mapping(Coin.Side coinSide => uint16 coinSideCount)) coinSideCounts;\\n    mapping(uint gameID => address[] player) allPlayers;\\n    mapping(uint gameID => mapping(uint16 playID => bytes32 proofOfChance))\\n        public proofOfChances;\\n\\n    event GamePlayCreated(\\n        uint indexed gameID,\\n        uint16 indexed gamePlayID,\\n        address indexed player,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    );\\n\\n    error AllMatchingPlaysError(Coin.Side availableCoinSide);\\n    error AlreadyPlayedError(uint16 playID);\\n\\n    modifier mustAvoidAllGamePlaysMatching(uint gameID, Coin.Side coinSide) {\\n        uint16 playsLeft = numberOfPlayersPerGame[gameID] - playCounts[gameID];\\n        uint16 headPlayCount = coinSideCounts[gameID][Coin.Side.Head];\\n        uint16 tailPlayCount = coinSideCounts[gameID][Coin.Side.Tail];\\n\\n        if (playsLeft == 1 && (headPlayCount == 0 || tailPlayCount == 0)) {\\n            Coin.Side availableCoinSide;\\n            if (headPlayCount == 0) {\\n                availableCoinSide = Coin.Side.Head;\\n            } else {\\n                availableCoinSide = Coin.Side.Tail;\\n            }\\n\\n            if (coinSide != availableCoinSide) {\\n                revert AllMatchingPlaysError(availableCoinSide);\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    modifier mustAvoidPlayingAgain(uint gameID) {\\n        uint16 myPlayID = playRecord[gameID][msg.sender];\\n\\n        if (myPlayID > 0) {\\n            revert AlreadyPlayedError(myPlayID);\\n        }\\n\\n        _;\\n    }\\n\\n    function createGamePlay(\\n        address player,\\n        uint gameID,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    ) internal {\\n        uint16 gamePlayID = playCounts[gameID] + 1;\\n        playRecord[gameID][player] = gamePlayID;\\n        proofOfChances[gameID][gamePlayID] = proofOfChance;\\n        players[gameID][coinSide].push(player);\\n        allPlayers[gameID].push(player);\\n        coinSideCounts[gameID][coinSide]++;\\n        playCounts[gameID]++;\\n\\n        emit GamePlayCreated(\\n            gameID,\\n            gamePlayID,\\n            player,\\n            coinSide,\\n            proofOfChance\\n        );\\n    }\\n\\n    function setNumberOfPlayers(uint gameID, uint16 numberOfPlayers) internal {\\n        numberOfPlayersPerGame[gameID] = numberOfPlayers;\\n    }\\n}\\n\",\"keccak256\":\"0x398432613cd27497f28af79d1dbd2b38729832df034ae94c11ef29e0f36935a7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/GameStatuses.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Game} from './Game.sol';\\n\\ncontract UsingGameStatuses {\\n    mapping(uint gameID => Game.Status) statuses;\\n    mapping(uint gameID => uint expiryTimestamp) expiryTimestamps;\\n\\n    error InvalidGameStatus(uint, Game.Status expected, Game.Status actual);\\n    error InvalidExpiryTimestamp();\\n\\n    modifier mustMatchGameStatus(uint gameID, Game.Status expectedGameStatus) {\\n        Game.Status actualGameStatus = getGameStatus(gameID);\\n\\n        if (actualGameStatus != expectedGameStatus) {\\n            revert InvalidGameStatus(\\n                gameID,\\n                expectedGameStatus,\\n                actualGameStatus\\n            );\\n        }\\n\\n        _;\\n    }\\n\\n    function setGameExpiry(uint gameID, uint expiryTimestamp) internal {\\n        if (expiryTimestamp <= block.timestamp) {\\n            revert InvalidExpiryTimestamp();\\n        }\\n        expiryTimestamps[gameID] = expiryTimestamp;\\n    }\\n\\n    function setGameStatus(uint gameID, Game.Status status) internal {\\n        statuses[gameID] = status;\\n    }\\n\\n    function getGameStatus(uint gameID) internal view returns (Game.Status) {\\n        if (expiryTimestamps[gameID] < block.timestamp) {\\n            return Game.Status.Expired;\\n        }\\n        return statuses[gameID];\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3e1ee67c76f2b61d105b68e18c88a1333330fc60fa6f95b6f513d358d6d33\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/MaybeOperational.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Ownable} from './Ownable.sol';\\n\\ncontract MaybeOperational is Ownable {\\n    bool private isOperational = true;\\n\\n    error InOperational();\\n\\n    /**\\n     * @dev Modifier that requires the \\\"operational\\\" boolean variable to be \\\"true\\\"\\n     *      This is used on all state changing functions to pause the contract in\\n     *      the event there is an issue that needs to be fixed\\n     */\\n    modifier mustBeOperational() {\\n        if (!isOperational) {\\n            revert InOperational();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets contract operations on/off\\n     *\\n     * When isOperational is false, all affected write transactions except for this one will fail\\n     */\\n    function setIsOperational(bool isOperational_) external onlyOwner {\\n        isOperational = isOperational_;\\n    }\\n}\\n\",\"keccak256\":\"0xf039b104312ee808c3f25afb55acdd263914fb6fec3b888a18779092820b8dfc\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    /// The caller account is not authorized to perform an operation.\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev The owner is not a valid owner account.\\n    error OwnableInvalidOwner(address owner);\\n\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Internal function without access restriction.\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x15ac57c15f454ac7dea87d454f5391ce85dd8f51fbcff754123afe3a1ec6cd3f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/ServiceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Ownable} from './Ownable.sol';\\n\\ncontract UsingServiceProvider is Ownable {\\n    /// @dev due to charges for the minimum wager allowed\\n    /// expected to be high due to the gas fee for the minimum wager\\n    /// initialServiceCharges (at deployment):\\n    /// If transaction fee is $6\\n    uint8 public serviceChargePercent = 8;\\n\\n    error InvalidServiceChargePercent();\\n\\n    function updateServiceChargePercent(\\n        uint8 serviceChargePercent_\\n    ) external onlyOwner {\\n        if (serviceChargePercent_ >= 100) {\\n            revert InvalidServiceChargePercent();\\n        }\\n\\n        serviceChargePercent = serviceChargePercent_;\\n    }\\n\\n    /// @dev Returns the service provider wallet owner\\n    function getServiceProviderWallet() external view returns (address) {\\n        return owner();\\n    }\\n\\n    function getServiceCharge(uint amount) external view returns (uint) {\\n        return (amount * serviceChargePercent) / 100;\\n    }\\n\\n    function getSplitAndServiceChargeAmounts(\\n        uint totalAmount,\\n        uint places\\n    ) internal view returns (uint, uint) {\\n        uint splitAmount = totalAmount / places;\\n        splitAmount =\\n            splitAmount -\\n            ((splitAmount * serviceChargePercent) / 100);\\n\\n        uint serviceChargeAmount = totalAmount - (splitAmount * places);\\n\\n        return (splitAmount, serviceChargeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0371e91a9df208c7ddf9c78821de76efbd2520d2ae5293af30b93841d1e0522f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Ownable} from './Ownable.sol';\\nimport {UsingReentrancyGuard} from './Wallets/ReentrancyGuard.sol';\\n\\n/// TODO: Move to orisirisi-contracts since it could be globally scoped\\ncontract Wallets is UsingReentrancyGuard {\\n    mapping(address account => uint amount) balances;\\n\\n    event Credit(address indexed account, uint amount);\\n    event Debit(address indexed account, uint amount);\\n\\n    error InsufficientFunds();\\n\\n    receive() external payable {\\n        _credit(msg.sender, msg.value);\\n    }\\n\\n    /// @dev Credits account. You could credit yourself or someone using this.\\n    function creditAccount(address account) external payable {\\n        _credit(account, msg.value);\\n    }\\n\\n    function credit() external payable {\\n        _credit(msg.sender, msg.value);\\n    }\\n\\n    /// @dev Credits player as though player manually credits themselves.\\n    function creditAccounts(address[] calldata accounts) external payable {\\n        uint amount = msg.value;\\n        uint accountsLength = accounts.length;\\n        require(amount % accountsLength == 0);\\n        uint amountForEachAccount = amount / accountsLength;\\n        for (uint i; i < accountsLength; ) {\\n            _credit(accounts[i], amountForEachAccount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function creditManyAndOne(\\n        address[] calldata manyAccounts,\\n        uint amountForEachManyAccount,\\n        address oneAccount,\\n        uint amountForOneAccount\\n    ) external payable {\\n        uint manyAccountsLength = manyAccounts.length;\\n        require(\\n            (amountForEachManyAccount * manyAccountsLength) +\\n                amountForOneAccount ==\\n                msg.value\\n        );\\n\\n        for (uint i; i < manyAccountsLength; ) {\\n            _credit(manyAccounts[i], amountForEachManyAccount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _credit(oneAccount, amountForOneAccount);\\n    }\\n\\n    /// @notice Allows you to withdraw a specified amount of your wallet balance\\n    function withdraw(uint amount) external nonReentrant {\\n        address account = msg.sender;\\n        uint balance = balances[account];\\n        if (balance < amount) {\\n            revert InsufficientFunds();\\n        }\\n        balances[account] -= amount;\\n\\n        _pay(account, amount);\\n\\n        emit Debit(account, amount);\\n    }\\n\\n    /// @notice Allows you to withdraw all your wallet balance\\n    function withdrawAll() external nonReentrant {\\n        address account = msg.sender;\\n        uint balance = balances[account];\\n        if (balance == 0) {\\n            revert InsufficientFunds();\\n        }\\n        balances[account] = 0;\\n\\n        _pay(account, balance);\\n\\n        emit Debit(account, balance);\\n    }\\n\\n    function _credit(address account, uint amount) private {\\n        balances[account] += amount;\\n        emit Credit(account, amount);\\n    }\\n\\n    /// @notice returns the balance of a wallet account\\n    function getBalance(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /// @notice returns the ether balance of this wallet contract\\n    function getTotalBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function _pay(address to, uint256 amount) private {\\n        (bool sent, ) = to.call{value: amount}('');\\n        require(sent);\\n    }\\n}\\n\",\"keccak256\":\"0x76a4286111fc036a56c3e8a0854438336f90b164519d632b39c979c48bf5a11a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.25;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract UsingReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x97c6633025c6aa27818e9f80b6a360e52da44d641f81c63749190339ca696825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526009805461ffff60a01b191661080160a01b17905534801561002557600080fd5b50604051611ca3380380611ca3833981016040819052610044916100de565b61004d3361008c565b600e80546001600160a01b0319166001600160a01b039490941693909317909255600c805461ffff191661ffff92909216919091179055600a55610134565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000606084860312156100f357600080fd5b83516001600160a01b038116811461010a57600080fd5b602085015190935061ffff8116811461012257600080fd5b80925050604084015190509250925092565b611b60806101436000396000f3fe60806040526004361061018f5760003560e01c80637d627c16116100d6578063d2f4a50a1161007f578063f7a5036b11610059578063f7a5036b146104ea578063fb632b7c1461050a578063fee445cc1461052057600080fd5b8063d2f4a50a14610497578063dfca2d05146104b7578063f2fde38b146104ca57600080fd5b8063bb9c3f2b116100b0578063bb9c3f2b1461044c578063c122212f14610462578063c5409ead1461047757600080fd5b80637d627c16146103da5780638da5cb5b146103fa578063b5ece9231461042c57600080fd5b806332d5499711610138578063728fdffa11610112578063728fdffa146103485780637737f50d146103765780637cb4baf9146103a757600080fd5b806332d54997146102d057806339a21b0b146102f057806353e636fc1461031057600080fd5b80632851a5cf116101695780632851a5cf146102705780632cda6e77146102905780632e683d59146102b057600080fd5b8063106608591461020e57806312b583491461022e57806318e70bd81461025057600080fd5b3661020957600e546040517f4d4b298e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911690634d4b298e9034906024016000604051808303818588803b1580156101f357600080fd5b505af1158015610207573d6000803e3d6000fd5b005b600080fd5b34801561021a57600080fd5b506102076102293660046115a9565b610533565b34801561023a57600080fd5b50475b6040519081526020015b60405180910390f35b34801561025c57600080fd5b5061020761026b3660046115f5565b6105bc565b34801561027c57600080fd5b5061020761028b366004611656565b610917565b34801561029c57600080fd5b506102076102ab36600461167a565b61094e565b3480156102bc57600080fd5b506102076102cb36600461169d565b6109ce565b3480156102dc57600080fd5b5061023d6102eb36600461169d565b6109e2565b3480156102fc57600080fd5b5061020761030b3660046116b6565b610a0f565b34801561031c57600080fd5b5061023d61032b36600461170f565b600660209081526000928352604080842090915290825290205481565b34801561035457600080fd5b50600c546103639061ffff1681565b60405161ffff9091168152602001610247565b34801561038257600080fd5b5061036361039136600461169d565b60016020526000908152604090205461ffff1681565b3480156103b357600080fd5b506009546103c890600160a81b900460ff1681565b60405160ff9091168152602001610247565b3480156103e657600080fd5b506102076103f536600461173b565b610a56565b34801561040657600080fd5b506009546001600160a01b03165b6040516001600160a01b039091168152602001610247565b34801561043857600080fd5b50610207610447366004611756565b610a76565b34801561045857600080fd5b5061023d600a5481565b34801561046e57600080fd5b50610414610ab7565b34801561048357600080fd5b50610207610492366004611778565b610ad0565b3480156104a357600080fd5b50600e54610414906001600160a01b031681565b6102076104c53660046117a9565b610b20565b3480156104d657600080fd5b506102076104e5366004611656565b610c8a565b3480156104f657600080fd5b5061020761050536600461169d565b610c9b565b34801561051657600080fd5b5061023d600d5481565b61020761052e3660046117ed565b610ca8565b61053b610ef0565b60005b60ff81168311156105b657600084848360ff1681811061056057610560611822565b9050602002013590506105738184610f47565b807fd617e9095b23d7bb3907d94521de27edce9fd9923dfb73805aa57d4f5338bb54846040516105a591815260200190565b60405180910390a25060010161053e565b50505050565b6105c4610ef0565b82600260006105d283610f92565b90508160038111156105e6576105e6611838565b8160038111156105f8576105f8611838565b1461062557828282604051637765da3560e01b815260040161061c93929190611862565b60405180910390fd5b6000805b60008881526001602052604090205461ffff908116908216101561081d5736600088888461ffff1681811061066057610660611822565b9050602002810190610672919061188b565b909250905060006106848460016118e8565b60008c815260066020908152604080832061ffff8516845290915290819020549051919250906002906106ba908690869061190a565b602060405180830381855afa1580156106d7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106fa919061191a565b14610731576040517f402fb0a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061073f83850185611933565b50905060005b60108160ff1610156107ce576000828260ff166010811061076857610768611822565b1a60f81b90507fff00000000000000000000000000000000000000000000000000000000000000811660000361079e57506107ce565b60008860018111156107b2576107b2611838565b036107c057600197506107c5565b600097505b50600101610745565b508161ffff168c7fa1ffc642177ab118fa3d9c64797cbc129024fdd953e7fc92c64eb358d2eaccfa86866040516108069291906119b6565b60405180910390a384600101945050505050610629565b5060008781526003602052604081208183600181111561083f5761083f611838565b600181111561085057610850611838565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610894575b5050505050905060006108c58983610fc6565b90506108d2896003611088565b887fa3f5520e27ebcfe38fd78c3854e39d00e8e9f7061551105f86fe8d1596ef84b884836040516109049291906119f5565b60405180910390a2505050505050505050565b61091f610ef0565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610956610ef0565b60648160ff1610610993576040517f4756d23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009805460ff909216600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b6109d6610ef0565b6109df816110bc565b50565b6009546000906064906109ff90600160a81b900460ff1684611a10565b610a099190611a27565b92915050565b610a17610ef0565b60005b60ff8116821115610a5157610a4983838360ff16818110610a3d57610a3d611822565b905060200201356110bc565b600101610a1a565b505050565b610a5e610ef0565b600c805461ffff191661ffff92909216919091179055565b610a7e610ef0565b60098054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000610acb6009546001600160a01b031690565b905090565b610ad8610ef0565b610ae28282610f47565b817fd617e9095b23d7bb3907d94521de27edce9fd9923dfb73805aa57d4f5338bb5482604051610b1491815260200190565b60405180910390a25050565b600954600160a01b900460ff16610b4a5760405163fececd2760e01b815260040160405180910390fd5b600a543490811015610b88576040517f139196d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600261ffff86161015610b9a57600080fd5b600c5461ffff9081169086161115610bde576040517f5473ed1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008154610bef90611a49565b91829055506000818152600b6020908152604080832086905560029091529020805461ffff191661ffff89161790559050610c2a8186610f47565b6040805161ffff88168152602081018790529081018390523390819083907fff4ce5d936207f27c07633704e6d1a8aa0d1ae75aad73192582381fe9a2ed2069060600160405180910390a3610c818183878761126d565b50505050505050565b610c92610ef0565b6109df8161146a565b610ca3610ef0565b600a55565b600954600160a01b900460ff16610cd25760405163fececd2760e01b815260040160405180910390fd5b82600080610cdf83610f92565b9050816003811115610cf357610cf3611838565b816003811115610d0557610d05611838565b14610d2957828282604051637765da3560e01b815260040161061c93929190611862565b6000868152600160209081526040808320546002909252822054889288929091610d5a9161ffff9081169116611a62565b6000848152600460209081526040808320838052909152808220546001808452919092205492935061ffff918216928216918416148015610da9575061ffff82161580610da9575061ffff8116155b15610e275760008261ffff16600003610dc457506000610dc8565b5060015b806001811115610dda57610dda611838565b856001811115610dec57610dec611838565b14610e2557806040517f14759b5000000000000000000000000000000000000000000000000000000000815260040161061c9190611a7d565b505b60008b8152602081815260408083203384529091529020548b9061ffff168015610e83576040517fccfdba1f00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260240161061c565b60008d8152600b6020526040902054348114610ecb576040517f65f2ffb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ed7338f8f8f61126d565b610ee08e6114c9565b5050505050505050505050505050565b33610f036009546001600160a01b031690565b6001600160a01b031614610f45576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161061c565b565b428111610f80576040517f4257cab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009182526008602052604090912055565b600081815260086020526040812054421115610fb057506001919050565b5060009081526007602052604090205460ff1690565b6000828152600b602090815260408083205460019092528220548290610ff09061ffff1683611a10565b90506000806110008387516114fe565b600e5491935091506001600160a01b031663dca5d1f884888561102b6009546001600160a01b031690565b866040518663ffffffff1660e01b815260040161104b9493929190611a8b565b6000604051808303818588803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b50949a9950505050505050505050565b6000828152600760205260409020805482919060ff191660018360038111156110b3576110b3611838565b02179055505050565b80600160006110ca83610f92565b90508160038111156110de576110de611838565b8160038111156110f0576110f0611838565b1461111457828282604051637765da3560e01b815260040161061c93929190611862565b60008481526005602090815260408083208054825181850281018501909352808352919290919083018282801561117457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611156575b5050835160008a8152600b602052604081205495965090949093506111a0925061ffff85169150611a10565b90506000806111b3838561ffff166114fe565b600e5491935091506001600160a01b031663dca5d1f88487856111de6009546001600160a01b031690565b866040518663ffffffff1660e01b81526004016111fe9493929190611a8b565b6000604051808303818588803b15801561121757600080fd5b505af115801561122b573d6000803e3d6000fd5b505050505061123b896003611088565b887f483a9ad42b66e69a3096814ad798345a0ed09694552a5b8a04abce8a0ba6fa258360405161090491815260200190565b600083815260016020819052604082205461128e9161ffff909116906118e8565b6000858152602081815260408083206001600160a01b038a1684528252808320805461ffff191661ffff8616908117909155888452600683528184209084528252808320869055878352600390915281209192508460018111156112f4576112f4611838565b600181111561130557611305611838565b8152602080820192909252604090810160009081208054600181810183559183528483200180546001600160a01b038b1673ffffffffffffffffffffffffffffffffffffffff19918216811790925589845260058652848420805480850182559085528685200180549091169091179055878252600490935290812091859081111561139357611393611838565b60018111156113a4576113a4611838565b815260208101919091526040016000908120805461ffff16916113c683611af6565b82546101009290920a61ffff8181021990931691831602179091556000868152600160205260408120805490921692506113ff83611af6565b91906101000a81548161ffff021916908361ffff16021790555050846001600160a01b03168161ffff16857fe7b36541da149ae31f5dd2085cea9f899aa58f8b33bb0db2be6acfe1d31515e5868660405161145b9291906119f5565b60405180910390a45050505050565b600980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008181526001602090815260408083205460029092529091205461ffff9182169116808203610a5157610a51836002611088565b6000808061150c8486611a27565b60095490915060649061152990600160a81b900460ff1683611a10565b6115339190611a27565b61153d9082611b17565b9050600061154b8583611a10565b6115559087611b17565b919350909150505b9250929050565b60008083601f84011261157657600080fd5b50813567ffffffffffffffff81111561158e57600080fd5b6020830191508360208260051b850101111561155d57600080fd5b6000806000604084860312156115be57600080fd5b833567ffffffffffffffff8111156115d557600080fd5b6115e186828701611564565b909790965060209590950135949350505050565b60008060006040848603121561160a57600080fd5b83359250602084013567ffffffffffffffff81111561162857600080fd5b61163486828701611564565b9497909650939450505050565b6001600160a01b03811681146109df57600080fd5b60006020828403121561166857600080fd5b813561167381611641565b9392505050565b60006020828403121561168c57600080fd5b813560ff8116811461167357600080fd5b6000602082840312156116af57600080fd5b5035919050565b600080602083850312156116c957600080fd5b823567ffffffffffffffff8111156116e057600080fd5b6116ec85828601611564565b90969095509350505050565b803561ffff8116811461170a57600080fd5b919050565b6000806040838503121561172257600080fd5b82359150611732602084016116f8565b90509250929050565b60006020828403121561174d57600080fd5b611673826116f8565b60006020828403121561176857600080fd5b8135801515811461167357600080fd5b6000806040838503121561178b57600080fd5b50508035926020909101359150565b80356002811061170a57600080fd5b600080600080608085870312156117bf57600080fd5b6117c8856116f8565b9350602085013592506117dd6040860161179a565b9396929550929360600135925050565b60008060006060848603121561180257600080fd5b833592506118126020850161179a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6004811061185e5761185e611838565b9052565b83815260608101611876602083018561184e565b611883604083018461184e565b949350505050565b6000808335601e198436030181126118a257600080fd5b83018035915067ffffffffffffffff8211156118bd57600080fd5b60200191503681900382131561155d57600080fd5b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611903576119036118d2565b5092915050565b8183823760009101908152919050565b60006020828403121561192c57600080fd5b5051919050565b6000806040838503121561194657600080fd5b82357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461197657600080fd5b915060208301357fffffffffffffffff000000000000000000000000000000000000000000000000811681146119ab57600080fd5b809150509250929050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6002811061185e5761185e611838565b60408101611a0382856119e5565b8260208301529392505050565b8082028115828204841417610a0957610a096118d2565b600082611a4457634e487b7160e01b600052601260045260246000fd5b500490565b600060018201611a5b57611a5b6118d2565b5060010190565b61ffff828116828216039080821115611903576119036118d2565b60208101610a0982846119e5565b6080808252855190820181905260009060209060a0840190828901845b82811015611acd5781516001600160a01b031684529284019290840190600101611aa8565b505050602084019690965250506001600160a01b03929092166040830152606090910152919050565b600061ffff808316818103611b0d57611b0d6118d2565b6001019392505050565b81810381811115610a0957610a096118d256fea2646970667358221220bc30554b41ab5a79f6b00ff61a51135c65fc694d77590a733ba2a71649e9447464736f6c63430008190033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80637d627c16116100d6578063d2f4a50a1161007f578063f7a5036b11610059578063f7a5036b146104ea578063fb632b7c1461050a578063fee445cc1461052057600080fd5b8063d2f4a50a14610497578063dfca2d05146104b7578063f2fde38b146104ca57600080fd5b8063bb9c3f2b116100b0578063bb9c3f2b1461044c578063c122212f14610462578063c5409ead1461047757600080fd5b80637d627c16146103da5780638da5cb5b146103fa578063b5ece9231461042c57600080fd5b806332d5499711610138578063728fdffa11610112578063728fdffa146103485780637737f50d146103765780637cb4baf9146103a757600080fd5b806332d54997146102d057806339a21b0b146102f057806353e636fc1461031057600080fd5b80632851a5cf116101695780632851a5cf146102705780632cda6e77146102905780632e683d59146102b057600080fd5b8063106608591461020e57806312b583491461022e57806318e70bd81461025057600080fd5b3661020957600e546040517f4d4b298e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911690634d4b298e9034906024016000604051808303818588803b1580156101f357600080fd5b505af1158015610207573d6000803e3d6000fd5b005b600080fd5b34801561021a57600080fd5b506102076102293660046115a9565b610533565b34801561023a57600080fd5b50475b6040519081526020015b60405180910390f35b34801561025c57600080fd5b5061020761026b3660046115f5565b6105bc565b34801561027c57600080fd5b5061020761028b366004611656565b610917565b34801561029c57600080fd5b506102076102ab36600461167a565b61094e565b3480156102bc57600080fd5b506102076102cb36600461169d565b6109ce565b3480156102dc57600080fd5b5061023d6102eb36600461169d565b6109e2565b3480156102fc57600080fd5b5061020761030b3660046116b6565b610a0f565b34801561031c57600080fd5b5061023d61032b36600461170f565b600660209081526000928352604080842090915290825290205481565b34801561035457600080fd5b50600c546103639061ffff1681565b60405161ffff9091168152602001610247565b34801561038257600080fd5b5061036361039136600461169d565b60016020526000908152604090205461ffff1681565b3480156103b357600080fd5b506009546103c890600160a81b900460ff1681565b60405160ff9091168152602001610247565b3480156103e657600080fd5b506102076103f536600461173b565b610a56565b34801561040657600080fd5b506009546001600160a01b03165b6040516001600160a01b039091168152602001610247565b34801561043857600080fd5b50610207610447366004611756565b610a76565b34801561045857600080fd5b5061023d600a5481565b34801561046e57600080fd5b50610414610ab7565b34801561048357600080fd5b50610207610492366004611778565b610ad0565b3480156104a357600080fd5b50600e54610414906001600160a01b031681565b6102076104c53660046117a9565b610b20565b3480156104d657600080fd5b506102076104e5366004611656565b610c8a565b3480156104f657600080fd5b5061020761050536600461169d565b610c9b565b34801561051657600080fd5b5061023d600d5481565b61020761052e3660046117ed565b610ca8565b61053b610ef0565b60005b60ff81168311156105b657600084848360ff1681811061056057610560611822565b9050602002013590506105738184610f47565b807fd617e9095b23d7bb3907d94521de27edce9fd9923dfb73805aa57d4f5338bb54846040516105a591815260200190565b60405180910390a25060010161053e565b50505050565b6105c4610ef0565b82600260006105d283610f92565b90508160038111156105e6576105e6611838565b8160038111156105f8576105f8611838565b1461062557828282604051637765da3560e01b815260040161061c93929190611862565b60405180910390fd5b6000805b60008881526001602052604090205461ffff908116908216101561081d5736600088888461ffff1681811061066057610660611822565b9050602002810190610672919061188b565b909250905060006106848460016118e8565b60008c815260066020908152604080832061ffff8516845290915290819020549051919250906002906106ba908690869061190a565b602060405180830381855afa1580156106d7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106fa919061191a565b14610731576040517f402fb0a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061073f83850185611933565b50905060005b60108160ff1610156107ce576000828260ff166010811061076857610768611822565b1a60f81b90507fff00000000000000000000000000000000000000000000000000000000000000811660000361079e57506107ce565b60008860018111156107b2576107b2611838565b036107c057600197506107c5565b600097505b50600101610745565b508161ffff168c7fa1ffc642177ab118fa3d9c64797cbc129024fdd953e7fc92c64eb358d2eaccfa86866040516108069291906119b6565b60405180910390a384600101945050505050610629565b5060008781526003602052604081208183600181111561083f5761083f611838565b600181111561085057610850611838565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610894575b5050505050905060006108c58983610fc6565b90506108d2896003611088565b887fa3f5520e27ebcfe38fd78c3854e39d00e8e9f7061551105f86fe8d1596ef84b884836040516109049291906119f5565b60405180910390a2505050505050505050565b61091f610ef0565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610956610ef0565b60648160ff1610610993576040517f4756d23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009805460ff909216600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b6109d6610ef0565b6109df816110bc565b50565b6009546000906064906109ff90600160a81b900460ff1684611a10565b610a099190611a27565b92915050565b610a17610ef0565b60005b60ff8116821115610a5157610a4983838360ff16818110610a3d57610a3d611822565b905060200201356110bc565b600101610a1a565b505050565b610a5e610ef0565b600c805461ffff191661ffff92909216919091179055565b610a7e610ef0565b60098054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000610acb6009546001600160a01b031690565b905090565b610ad8610ef0565b610ae28282610f47565b817fd617e9095b23d7bb3907d94521de27edce9fd9923dfb73805aa57d4f5338bb5482604051610b1491815260200190565b60405180910390a25050565b600954600160a01b900460ff16610b4a5760405163fececd2760e01b815260040160405180910390fd5b600a543490811015610b88576040517f139196d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600261ffff86161015610b9a57600080fd5b600c5461ffff9081169086161115610bde576040517f5473ed1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008154610bef90611a49565b91829055506000818152600b6020908152604080832086905560029091529020805461ffff191661ffff89161790559050610c2a8186610f47565b6040805161ffff88168152602081018790529081018390523390819083907fff4ce5d936207f27c07633704e6d1a8aa0d1ae75aad73192582381fe9a2ed2069060600160405180910390a3610c818183878761126d565b50505050505050565b610c92610ef0565b6109df8161146a565b610ca3610ef0565b600a55565b600954600160a01b900460ff16610cd25760405163fececd2760e01b815260040160405180910390fd5b82600080610cdf83610f92565b9050816003811115610cf357610cf3611838565b816003811115610d0557610d05611838565b14610d2957828282604051637765da3560e01b815260040161061c93929190611862565b6000868152600160209081526040808320546002909252822054889288929091610d5a9161ffff9081169116611a62565b6000848152600460209081526040808320838052909152808220546001808452919092205492935061ffff918216928216918416148015610da9575061ffff82161580610da9575061ffff8116155b15610e275760008261ffff16600003610dc457506000610dc8565b5060015b806001811115610dda57610dda611838565b856001811115610dec57610dec611838565b14610e2557806040517f14759b5000000000000000000000000000000000000000000000000000000000815260040161061c9190611a7d565b505b60008b8152602081815260408083203384529091529020548b9061ffff168015610e83576040517fccfdba1f00000000000000000000000000000000000000000000000000000000815261ffff8216600482015260240161061c565b60008d8152600b6020526040902054348114610ecb576040517f65f2ffb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ed7338f8f8f61126d565b610ee08e6114c9565b5050505050505050505050505050565b33610f036009546001600160a01b031690565b6001600160a01b031614610f45576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161061c565b565b428111610f80576040517f4257cab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009182526008602052604090912055565b600081815260086020526040812054421115610fb057506001919050565b5060009081526007602052604090205460ff1690565b6000828152600b602090815260408083205460019092528220548290610ff09061ffff1683611a10565b90506000806110008387516114fe565b600e5491935091506001600160a01b031663dca5d1f884888561102b6009546001600160a01b031690565b866040518663ffffffff1660e01b815260040161104b9493929190611a8b565b6000604051808303818588803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b50949a9950505050505050505050565b6000828152600760205260409020805482919060ff191660018360038111156110b3576110b3611838565b02179055505050565b80600160006110ca83610f92565b90508160038111156110de576110de611838565b8160038111156110f0576110f0611838565b1461111457828282604051637765da3560e01b815260040161061c93929190611862565b60008481526005602090815260408083208054825181850281018501909352808352919290919083018282801561117457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611156575b5050835160008a8152600b602052604081205495965090949093506111a0925061ffff85169150611a10565b90506000806111b3838561ffff166114fe565b600e5491935091506001600160a01b031663dca5d1f88487856111de6009546001600160a01b031690565b866040518663ffffffff1660e01b81526004016111fe9493929190611a8b565b6000604051808303818588803b15801561121757600080fd5b505af115801561122b573d6000803e3d6000fd5b505050505061123b896003611088565b887f483a9ad42b66e69a3096814ad798345a0ed09694552a5b8a04abce8a0ba6fa258360405161090491815260200190565b600083815260016020819052604082205461128e9161ffff909116906118e8565b6000858152602081815260408083206001600160a01b038a1684528252808320805461ffff191661ffff8616908117909155888452600683528184209084528252808320869055878352600390915281209192508460018111156112f4576112f4611838565b600181111561130557611305611838565b8152602080820192909252604090810160009081208054600181810183559183528483200180546001600160a01b038b1673ffffffffffffffffffffffffffffffffffffffff19918216811790925589845260058652848420805480850182559085528685200180549091169091179055878252600490935290812091859081111561139357611393611838565b60018111156113a4576113a4611838565b815260208101919091526040016000908120805461ffff16916113c683611af6565b82546101009290920a61ffff8181021990931691831602179091556000868152600160205260408120805490921692506113ff83611af6565b91906101000a81548161ffff021916908361ffff16021790555050846001600160a01b03168161ffff16857fe7b36541da149ae31f5dd2085cea9f899aa58f8b33bb0db2be6acfe1d31515e5868660405161145b9291906119f5565b60405180910390a45050505050565b600980546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008181526001602090815260408083205460029092529091205461ffff9182169116808203610a5157610a51836002611088565b6000808061150c8486611a27565b60095490915060649061152990600160a81b900460ff1683611a10565b6115339190611a27565b61153d9082611b17565b9050600061154b8583611a10565b6115559087611b17565b919350909150505b9250929050565b60008083601f84011261157657600080fd5b50813567ffffffffffffffff81111561158e57600080fd5b6020830191508360208260051b850101111561155d57600080fd5b6000806000604084860312156115be57600080fd5b833567ffffffffffffffff8111156115d557600080fd5b6115e186828701611564565b909790965060209590950135949350505050565b60008060006040848603121561160a57600080fd5b83359250602084013567ffffffffffffffff81111561162857600080fd5b61163486828701611564565b9497909650939450505050565b6001600160a01b03811681146109df57600080fd5b60006020828403121561166857600080fd5b813561167381611641565b9392505050565b60006020828403121561168c57600080fd5b813560ff8116811461167357600080fd5b6000602082840312156116af57600080fd5b5035919050565b600080602083850312156116c957600080fd5b823567ffffffffffffffff8111156116e057600080fd5b6116ec85828601611564565b90969095509350505050565b803561ffff8116811461170a57600080fd5b919050565b6000806040838503121561172257600080fd5b82359150611732602084016116f8565b90509250929050565b60006020828403121561174d57600080fd5b611673826116f8565b60006020828403121561176857600080fd5b8135801515811461167357600080fd5b6000806040838503121561178b57600080fd5b50508035926020909101359150565b80356002811061170a57600080fd5b600080600080608085870312156117bf57600080fd5b6117c8856116f8565b9350602085013592506117dd6040860161179a565b9396929550929360600135925050565b60008060006060848603121561180257600080fd5b833592506118126020850161179a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6004811061185e5761185e611838565b9052565b83815260608101611876602083018561184e565b611883604083018461184e565b949350505050565b6000808335601e198436030181126118a257600080fd5b83018035915067ffffffffffffffff8211156118bd57600080fd5b60200191503681900382131561155d57600080fd5b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611903576119036118d2565b5092915050565b8183823760009101908152919050565b60006020828403121561192c57600080fd5b5051919050565b6000806040838503121561194657600080fd5b82357fffffffffffffffffffffffffffffffff000000000000000000000000000000008116811461197657600080fd5b915060208301357fffffffffffffffff000000000000000000000000000000000000000000000000811681146119ab57600080fd5b809150509250929050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6002811061185e5761185e611838565b60408101611a0382856119e5565b8260208301529392505050565b8082028115828204841417610a0957610a096118d2565b600082611a4457634e487b7160e01b600052601260045260246000fd5b500490565b600060018201611a5b57611a5b6118d2565b5060010190565b61ffff828116828216039080821115611903576119036118d2565b60208101610a0982846119e5565b6080808252855190820181905260009060209060a0840190828901845b82811015611acd5781516001600160a01b031684529284019290840190600101611aa8565b505050602084019690965250506001600160a01b03929092166040830152606090910152919050565b600061ffff808316818103611b0d57611b0d6118d2565b6001019392505050565b81810381811115610a0957610a096118d256fea2646970667358221220bc30554b41ab5a79f6b00ff61a51135c65fc694d77590a733ba2a71649e9447464736f6c63430008190033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createGame(uint16,uint256,uint8,bytes32)": {
        "params": {
          "coinSide": "predicted coin side by you, the creator",
          "expiryTimestamp": "Expiry timestamp of the game",
          "numberOfPlayers": "number of participating players",
          "proofOfChance": "SHA256 hash of your chance (lucky word[s]) and a random salt combined"
        }
      },
      "getServiceProviderWallet()": {
        "details": "Returns the service provider wallet owner"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "playGame(uint256,uint8,bytes32)": {
        "params": {
          "coinSide": "coin side outcome prediction",
          "gameID": "already created game ID",
          "proofOfChance": "SHA256 hash of your chance (lucky word[s]) and a random salt combined"
        }
      },
      "refundExpiredGamePlayers(uint256)": {
        "params": {
          "gameID": "game ID of expired game"
        }
      },
      "refundExpiredGamePlayersForAllGames(uint256[])": {
        "params": {
          "gameIDs": "game IDs of expired games"
        }
      },
      "revealChancesAndCreditWinners(uint256,bytes[])": {
        "params": {
          "chanceAndSalts": "list of the chance and salts combined in the order of their respecitive play IDs",
          "gameID": "already created game ID"
        }
      },
      "setIsOperational(bool)": {
        "details": "Sets contract operations on/off When isOperational is false, all affected write transactions except for this one will fail"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OwnableUnauthorizedAccount(address)": [
        {
          "notice": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "createGame(uint16,uint256,uint8,bytes32)": {
        "notice": "Creates a new game"
      },
      "getTotalBalance()": {
        "notice": "returns the ether balance of this contract i.e. total wagers staked"
      },
      "playGame(uint256,uint8,bytes32)": {
        "notice": "Allows playing an already created game"
      },
      "refundExpiredGamePlayers(uint256)": {
        "notice": "Refund wagers of an expired game to its players"
      },
      "refundExpiredGamePlayersForAllGames(uint256[])": {
        "notice": "Batch refunds expired game players"
      },
      "revealChancesAndCreditWinners(uint256,bytes[])": {
        "notice": "Reveals the chances (lucky words) of all plays for a given game. After, it computes and stores the coinflip outcome for the given game. Then, it credits players that predicted the coinflip outcome correctly with the combined wager shared equally (after service charge deduction)"
      },
      "updateMaxNumberOfPlayers(uint16)": {
        "notice": "Updates max number of players to avoid concluding games with very high gas fee"
      },
      "updateMinWagerPerGame(uint256)": {
        "notice": "Updates min wager allowed"
      },
      "updateWallets(address)": {
        "notice": "Allow updating Wallets conrtact in case a PPV is ever discovered"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 762,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "playRecord",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint16))"
      },
      {
        "astId": 766,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "playCounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 770,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "numberOfPlayersPerGame",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 778,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "players",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Side)736,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 785,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "coinSideCounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Side)736,t_uint16))"
      },
      {
        "astId": 790,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "allPlayers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 796,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "proofOfChances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint16,t_bytes32))"
      },
      {
        "astId": 1025,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "statuses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_enum(Status)749)"
      },
      {
        "astId": 1029,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "expiryTimestamps",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1175,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1143,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "isOperational",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1278,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "serviceChargePercent",
        "offset": 21,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 29,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "minWager",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 33,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "wagers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 35,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "maxNumberOfPlayers",
        "offset": 0,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 37,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "gamesCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 40,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "wallets",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Wallets)1689"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Wallets)1689": {
        "encoding": "inplace",
        "label": "contract Wallets",
        "numberOfBytes": "20"
      },
      "t_enum(Side)736": {
        "encoding": "inplace",
        "label": "enum Coin.Side",
        "numberOfBytes": "1"
      },
      "t_enum(Status)749": {
        "encoding": "inplace",
        "label": "enum Game.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_enum(Side)736,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Side)736",
        "label": "mapping(enum Coin.Side => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(Side)736,t_uint16)": {
        "encoding": "mapping",
        "key": "t_enum(Side)736",
        "label": "mapping(enum Coin.Side => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_enum(Status)749)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Game.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)749"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint16)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Side)736,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum Coin.Side => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Side)736,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Side)736,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum Coin.Side => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Side)736,t_uint16)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint16,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint16 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes32)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}