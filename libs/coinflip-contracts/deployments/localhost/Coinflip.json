{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallets_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "maxNumberOfPlayers_",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "minWager_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum Coin.Side",
          "name": "availableCoinSide",
          "type": "uint8"
        }
      ],
      "name": "AllMatchingPlaysError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "playID",
          "type": "uint16"
        }
      ],
      "name": "AlreadyPlayedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InOperative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedChanceAndSaltSize",
          "type": "uint256"
        }
      ],
      "name": "IncompleteChanceAndSaltsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientWalletBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpiryTimestamp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum Game.Status",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "enum Game.Status",
          "name": "actual",
          "type": "uint8"
        }
      ],
      "name": "InvalidGameStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProofOfChance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidServiceChargePercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxNumberOfPlayersError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumPlayCountError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedAmountPerPlayer",
          "type": "uint256"
        }
      ],
      "name": "ExpiredGameRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForEachWinner",
          "type": "uint256"
        }
      ],
      "name": "GameCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "numberOfPlayers",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "gamePlayID",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "chanceAndSalt",
          "type": "bytes"
        }
      ],
      "name": "GamePlayChanceRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "gamePlayID",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "GamePlayCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "numberOfPlayers",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getServiceCharge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceProviderWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWager",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        }
      ],
      "name": "playCounts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "playCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "enum Coin.Side",
          "name": "coinSide",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "playID",
          "type": "uint16"
        }
      ],
      "name": "proofOfChances",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proofOfChance",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "gameIDs",
          "type": "uint256[]"
        }
      ],
      "name": "refundExpiredGamePlayersForAllGames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameID",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "chanceAndSalts",
          "type": "bytes[]"
        }
      ],
      "name": "revealChancesAndCreditWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceChargePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mode",
          "type": "bool"
        }
      ],
      "name": "setOperatingStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "maxNumberOfPlayers_",
          "type": "uint16"
        }
      ],
      "name": "updateMaxNumberOfPlayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "minWager_",
          "type": "uint16"
        }
      ],
      "name": "updateMinWagerOfPlayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "serviceChargePercent_",
          "type": "uint8"
        }
      ],
      "name": "updateServiceChargePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallets_",
          "type": "address"
        }
      ],
      "name": "updateWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallets",
      "outputs": [
        {
          "internalType": "contract Wallets",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa9b4fbfa96d438c3509f49e30259eaf9915082acda279b67e8188010dd2ad839",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2650872",
    "logsBloom": "0x
    "blockHash": "0xb09d81e831d69ccd5e692a41c91305bdecf9b3ddeaf2a4da343864537de82387",
    "transactionHash": "0xa9b4fbfa96d438c3509f49e30259eaf9915082acda279b67e8188010dd2ad839",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xa9b4fbfa96d438c3509f49e30259eaf9915082acda279b67e8188010dd2ad839",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb09d81e831d69ccd5e692a41c91305bdecf9b3ddeaf2a4da343864537de82387"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2650872",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    20,
    "1000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f3a83366926e8c65779394bb73598cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallets_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"maxNumberOfPlayers_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minWager_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum Coin.Side\",\"name\":\"availableCoinSide\",\"type\":\"uint8\"}],\"name\":\"AllMatchingPlaysError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"playID\",\"type\":\"uint16\"}],\"name\":\"AlreadyPlayedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InOperative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedChanceAndSaltSize\",\"type\":\"uint256\"}],\"name\":\"IncompleteChanceAndSaltsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientWalletBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Game.Status\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"enum Game.Status\",\"name\":\"actual\",\"type\":\"uint8\"}],\"name\":\"InvalidGameStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProofOfChance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidServiceChargePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxNumberOfPlayersError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumPlayCountError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmountPerPlayer\",\"type\":\"uint256\"}],\"name\":\"ExpiredGameRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForEachWinner\",\"type\":\"uint256\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"numberOfPlayers\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"gamePlayID\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"chanceAndSalt\",\"type\":\"bytes\"}],\"name\":\"GamePlayChanceRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"gamePlayID\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"GamePlayCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numberOfPlayers\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getServiceCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceProviderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"playCounts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"playCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"enum Coin.Side\",\"name\":\"coinSide\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"playID\",\"type\":\"uint16\"}],\"name\":\"proofOfChances\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proofOfChance\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gameIDs\",\"type\":\"uint256[]\"}],\"name\":\"refundExpiredGamePlayersForAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"chanceAndSalts\",\"type\":\"bytes[]\"}],\"name\":\"revealChancesAndCreditWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceChargePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setOperatingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxNumberOfPlayers_\",\"type\":\"uint16\"}],\"name\":\"updateMaxNumberOfPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minWager_\",\"type\":\"uint16\"}],\"name\":\"updateMinWagerOfPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"serviceChargePercent_\",\"type\":\"uint8\"}],\"name\":\"updateServiceChargePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallets_\",\"type\":\"address\"}],\"name\":\"updateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"contract Wallets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account.\"}]},\"kind\":\"dev\",\"methods\":{\"createGame(uint256,uint16,uint256,uint8,bytes32)\":{\"params\":{\"coinSide\":\"predicted coin side by you, the creator\",\"expiryTimestamp\":\"Expiry timestamp of the game\",\"numberOfPlayers\":\"number of participating players\",\"proofOfChance\":\"SHA256 hash of your chance (lucky word[s]) and a random salt combined\",\"wager\":\"ether value required paticipating players to pay before playing\"}},\"getServiceProviderWallet()\":{\"details\":\"Returns the service provider wallet owner\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"playGame(uint256,uint8,bytes32)\":{\"params\":{\"coinSide\":\"coin side outcome prediction\",\"gameID\":\"already created game ID\",\"proofOfChance\":\"SHA256 hash of your chance (lucky word[s]) and a random salt combined\"}},\"refundExpiredGamePlayersForAllGames(uint256[])\":{\"params\":{\"gameIDs\":\"game IDs of expired games\"}},\"revealChancesAndCreditWinners(uint256,bytes[])\":{\"params\":{\"chanceAndSalts\":\"list of the chance and salts combined in the order of their respecitive play IDs\",\"gameID\":\"already created game ID\"}},\"setOperatingStatus(bool)\":{\"details\":\"Sets contract operations on/off When operational mode is disabled, all write transactions except for this one will fail\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"OwnableUnauthorizedAccount(address)\":[{\"notice\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"user\",\"methods\":{\"createGame(uint256,uint16,uint256,uint8,bytes32)\":{\"notice\":\"Creates a new game\"},\"playGame(uint256,uint8,bytes32)\":{\"notice\":\"Allows playing an already created game\"},\"refundExpiredGamePlayersForAllGames(uint256[])\":{\"notice\":\"Batch refunds expired game players\"},\"revealChancesAndCreditWinners(uint256,bytes[])\":{\"notice\":\"Reveals the chances (lucky words) of all plays for a given game. After, it computes and stores the coinflip outcome for the given game. Then, it credits players that predicted the coinflip outcome correctly with the combined wager shared equally (after service charge deduction)\"},\"updateMaxNumberOfPlayers(uint16)\":{\"notice\":\"Updates max number of players to avoid concluding games with very high gas fee\"},\"updateMinWagerOfPlayers(uint16)\":{\"notice\":\"Updates min wager allowed\"},\"updateWallets(address)\":{\"notice\":\"Allow updating Wallets conrtact in case a PPV is ever discovered\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Coinflip.sol\":\"Coinflip\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"src/Coinflip.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport 'hardhat/console.sol';\\n\\nimport {Coin} from './Coinflip/Coin.sol';\\nimport {Game} from './Coinflip/Game.sol';\\nimport {UsingGamePlays} from './Coinflip/GamePlays.sol';\\nimport {UsingGameWagers} from './Coinflip/GameWagers.sol';\\nimport {UsingGameStatuses} from './Coinflip/GameStatuses.sol';\\n\\nimport {Wallets} from './Wallets.sol';\\nimport {Ownable} from './Ownable.sol';\\nimport {MaybeOperational} from './MaybeOperational.sol';\\nimport {UsingServiceProvider} from './ServiceProvider.sol';\\n\\ncontract Coinflip is\\n    UsingGamePlays,\\n    UsingGameWagers,\\n    UsingGameStatuses,\\n    Ownable,\\n    MaybeOperational,\\n    UsingServiceProvider\\n{\\n    uint public minWager;\\n    uint16 public maxNumberOfPlayers;\\n    uint public gamesCount;\\n    Wallets public wallets;\\n\\n    event GameCreated(\\n        uint indexed gameID,\\n        address indexed creator,\\n        uint16 numberOfPlayers,\\n        uint expiryTimestamp,\\n        uint wager\\n    );\\n    event GamePlayChanceRevealed(\\n        uint indexed gameID,\\n        uint16 indexed gamePlayID,\\n        bytes chanceAndSalt\\n    );\\n    event GameCompleted(\\n        uint indexed gameID,\\n        Coin.Side coinSide,\\n        uint amountForEachWinner\\n    );\\n    event ExpiredGameRefunded(\\n        uint indexed gameID,\\n        uint refundedAmountPerPlayer\\n    );\\n\\n    error InsufficientWalletBalance();\\n    error MinimumPlayCountError();\\n    error InvalidProofOfChance();\\n    error MaxNumberOfPlayersError();\\n    error IncompleteChanceAndSaltsError(uint expectedChanceAndSaltSize);\\n\\n    constructor(\\n        address payable wallets_,\\n        uint16 maxNumberOfPlayers_,\\n        uint minWager_\\n    ) {\\n        wallets = Wallets(wallets_);\\n        maxNumberOfPlayers = maxNumberOfPlayers_;\\n        minWager = minWager_;\\n    }\\n\\n    /// @notice Coinflip tops up your wallet balance when it receives any ether value\\n    receive() external payable {\\n        topUpWallet();\\n    }\\n\\n    /// @notice Allow updating Wallets conrtact in case a PPV is ever discovered\\n    function updateWallets(address payable wallets_) external onlyOwner {\\n        wallets = Wallets(wallets_);\\n    }\\n\\n    /// @notice Updates max number of players to avoid concluding games with very high gas fee\\n    function updateMaxNumberOfPlayers(\\n        uint16 maxNumberOfPlayers_\\n    ) external onlyOwner {\\n        maxNumberOfPlayers = maxNumberOfPlayers_;\\n    }\\n\\n    /// @notice Updates min wager allowed\\n    function updateMinWagerOfPlayers(uint16 minWager_) external onlyOwner {\\n        minWager = minWager_;\\n    }\\n\\n    /// @notice Creates a new game\\n    /// @param wager ether value required paticipating players to pay before playing\\n    /// @param numberOfPlayers number of participating players\\n    /// @param expiryTimestamp Expiry timestamp of the game\\n    /// @param coinSide predicted coin side by you, the creator\\n    /// @param proofOfChance SHA256 hash of your chance (lucky word[s]) and a random salt combined\\n    function createGame(\\n        uint wager,\\n        uint16 numberOfPlayers,\\n        uint expiryTimestamp,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    ) external payable mustBeOperational {\\n        console.log('Wager %s', wager);\\n\\n        if (numberOfPlayers < Coin.TOTAL_SIDES_COUNT) {\\n            revert MinimumPlayCountError();\\n        }\\n\\n        console.log('numberOfPlayers %s', numberOfPlayers);\\n\\n        if (numberOfPlayers > maxNumberOfPlayers) {\\n            revert MaxNumberOfPlayersError();\\n        }\\n\\n        uint newGameID = gamesCount + 1;\\n        maybeTopUpWallet();\\n        createGameWager(newGameID, wager);\\n        payGameWager(newGameID, wager);\\n        setNumberOfPlayers(newGameID, numberOfPlayers);\\n        setGameStatusAsAwaitingPlayers(newGameID, expiryTimestamp);\\n\\n        unchecked {\\n            gamesCount++;\\n        }\\n\\n        emit GameCreated(\\n            newGameID,\\n            msg.sender,\\n            numberOfPlayers,\\n            expiryTimestamp,\\n            wager\\n        );\\n\\n        createGamePlay(newGameID, coinSide, proofOfChance);\\n    }\\n\\n    /// @notice Allows playing an already created game\\n    /// @param gameID already created game ID\\n    /// @param coinSide coin side outcome prediction\\n    /// @param proofOfChance SHA256 hash of your chance (lucky word[s]) and a random salt combined\\n    function playGame(\\n        uint gameID,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    )\\n        external\\n        payable\\n        mustBeOperational\\n        mustMatchGameStatus(gameID, Game.Status.AwaitingPlayers)\\n        mustAvoidAllGamePlaysMatching(gameID, coinSide)\\n        mustAvoidPlayingAgain(gameID)\\n    {\\n        maybeTopUpWallet();\\n        uint wager = getGameWager(gameID);\\n        payGameWager(gameID, wager);\\n        createGamePlay(gameID, coinSide, proofOfChance);\\n        maybeSetGameStatusAsAwaitingChancesUpload(gameID);\\n    }\\n\\n    /// @notice Reveals the chances (lucky words) of all plays for a given game.\\n    /// After, it computes and stores the coinflip outcome for the given game.\\n    /// Then, it credits players that predicted the coinflip outcome correctly with the combined\\n    /// wager shared equally (after service charge deduction)\\n    /// @param gameID already created game ID\\n    /// @param chanceAndSalts list of the chance and salts combined in the order of their respecitive play IDs\\n    function revealChancesAndCreditWinners(\\n        uint gameID,\\n        bytes[] memory chanceAndSalts\\n    )\\n        external\\n        onlyOwner\\n        mustMatchGameStatus(gameID, Game.Status.AwaitingChancesUpload)\\n    {\\n        Coin.Side flipOutcome;\\n        for (uint16 i = 0; i < playCounts[gameID]; i++) {\\n            bytes memory chanceAndSalt = chanceAndSalts[i];\\n\\n            uint16 gamePlayID = i + 1;\\n\\n            if (sha256(chanceAndSalt) != proofOfChances[gameID][gamePlayID]) {\\n                revert InvalidProofOfChance();\\n            }\\n\\n            (bytes16 chance, ) = abi.decode(chanceAndSalt, (bytes16, bytes8));\\n\\n            for (uint8 j = 0; j < 16; j++) {\\n                bytes1 chance_character = chance[j];\\n                if (chance_character == 0) {\\n                    break;\\n                }\\n\\n                unchecked {\\n                    if (flipOutcome == Coin.Side.Head) {\\n                        flipOutcome = Coin.Side.Tail;\\n                    } else {\\n                        flipOutcome = Coin.Side.Head;\\n                    }\\n                }\\n            }\\n            emit GamePlayChanceRevealed(gameID, gamePlayID, chanceAndSalt);\\n        }\\n        address[] memory winners = players[gameID][flipOutcome];\\n        uint amountForEachWinner = creditGameWinners(gameID, winners);\\n        setGameStatusAsConcluded(gameID);\\n        emit GameCompleted(gameID, flipOutcome, amountForEachWinner);\\n    }\\n\\n    /// @notice Batch refunds expired game players\\n    /// @param gameIDs game IDs of expired games\\n    function refundExpiredGamePlayersForAllGames(\\n        uint[] memory gameIDs\\n    ) external {\\n        for (uint8 i = 0; i < gameIDs.length; i++) {\\n            refundExpiredGamePlayers(gameIDs[i]);\\n        }\\n    }\\n\\n    function refundExpiredGamePlayers(\\n        uint gameID\\n    ) private onlyOwner mustMatchGameStatus(gameID, Game.Status.Expired) {\\n        address[] memory allPlayers = allPlayers[gameID];\\n        uint16 allPlayersSize = uint16(allPlayers.length);\\n\\n        uint totalWager = getGameWager(gameID) * allPlayersSize;\\n\\n        uint refundAmountPerPlayer = getSplitAmountAfterServiceChargeDeduction(\\n            totalWager,\\n            allPlayersSize\\n        );\\n\\n        wallets.creditPlayersAndCreditAppTheRest(\\n            gameID,\\n            allPlayers,\\n            refundAmountPerPlayer\\n        );\\n\\n        setGameStatusAsConcluded(gameID);\\n\\n        emit ExpiredGameRefunded(gameID, refundAmountPerPlayer);\\n    }\\n\\n    function creditGameWinners(\\n        uint gameID,\\n        address[] memory winners\\n    ) private returns (uint amountForEachWinner) {\\n        uint gameWager = getGameWager(gameID);\\n        uint totalWager = gameWager * playCounts[gameID];\\n\\n        uint amountForEachPlayer = getSplitAmountAfterServiceChargeDeduction(\\n            totalWager,\\n            winners.length\\n        );\\n\\n        wallets.creditPlayersAndCreditAppTheRest(\\n            gameID,\\n            winners,\\n            amountForEachPlayer\\n        );\\n\\n        return amountForEachPlayer;\\n    }\\n\\n    function maybeSetGameStatusAsAwaitingChancesUpload(uint gameID) private {\\n        uint16 playCount = playCounts[gameID];\\n        uint16 numberOfPlayers = numberOfPlayersPerGame[gameID];\\n\\n        if (playCount == numberOfPlayers) {\\n            setGameStatusAsAwaitingChancesUpload(gameID);\\n        }\\n    }\\n\\n    function payGameWager(uint gameID, uint wager) private {\\n        wallets.debitForGame(gameID, msg.sender, wager);\\n    }\\n\\n    function maybeTopUpWallet() private {\\n        if (msg.value > 0) {\\n            topUpWallet();\\n        }\\n    }\\n\\n    function topUpWallet() private {\\n        wallets.creditPlayer{value: msg.value}(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x68f6c420e09c86f674ee43d0192aa499bfb8d2e27cd9f695d5cb303507632801\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/Coin.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nlibrary Coin {\\n    enum Side {\\n        Head,\\n        Tail\\n    }\\n\\n    uint8 public constant TOTAL_SIDES_COUNT = 2;\\n}\\n\",\"keccak256\":\"0xf820817d62d8e69c6d9bf37e75c6140c2935b2d50df3de6800fcf44764fec23f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/Game.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Coin} from './Coin.sol';\\n\\nlibrary Game {\\n    enum Status {\\n        AwaitingPlayers,\\n        Expired,\\n        AwaitingChancesUpload,\\n        /// Concluded games are Completed/Expired games have been paid_out/refunded\\n        Concluded\\n    }\\n}\\n\",\"keccak256\":\"0x3fa4c133d12b3a2acd5a08c61bf476191c57096b34d387f48d8d03c3a2dbcdff\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/GamePlays.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport 'hardhat/console.sol';\\n\\nimport {Coin} from './Coin.sol';\\nimport {Game} from './Game.sol';\\n\\ncontract UsingGamePlays {\\n    mapping(uint gameID => mapping(address player => uint16 playID)) playRecord;\\n    mapping(uint gameID => uint16 playCount) public playCounts;\\n    mapping(uint gameID => uint16 numberOfPlayers) numberOfPlayersPerGame;\\n    mapping(uint gameID => mapping(Coin.Side coinSide => address[] player)) players;\\n    mapping(uint gameID => mapping(Coin.Side coinSide => uint16 coinSideCount)) coinSideCounts;\\n    mapping(uint gameID => address[] player) allPlayers;\\n    mapping(uint gameID => mapping(uint16 playID => bytes32 proofOfChance))\\n        public proofOfChances;\\n\\n    event GamePlayCreated(\\n        uint indexed gameID,\\n        uint16 indexed gamePlayID,\\n        address indexed player,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    );\\n\\n    error AllMatchingPlaysError(Coin.Side availableCoinSide);\\n    error AlreadyPlayedError(uint16 playID);\\n\\n    modifier mustAvoidAllGamePlaysMatching(uint gameID, Coin.Side coinSide) {\\n        uint16 playsLeft = numberOfPlayersPerGame[gameID] - playCounts[gameID];\\n        uint16 headPlayCount = coinSideCounts[gameID][Coin.Side.Head];\\n        uint16 tailPlayCount = coinSideCounts[gameID][Coin.Side.Tail];\\n\\n        if (playsLeft == 1 && (headPlayCount == 0 || tailPlayCount == 0)) {\\n            Coin.Side availableCoinSide;\\n            if (headPlayCount == 0) {\\n                availableCoinSide = Coin.Side.Head;\\n            } else {\\n                availableCoinSide = Coin.Side.Tail;\\n            }\\n\\n            if (coinSide != availableCoinSide) {\\n                revert AllMatchingPlaysError(availableCoinSide);\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    modifier mustAvoidPlayingAgain(uint gameID) {\\n        uint16 myPlayID = playRecord[gameID][msg.sender];\\n\\n        if (myPlayID > 0) {\\n            revert AlreadyPlayedError(myPlayID);\\n        }\\n\\n        _;\\n    }\\n\\n    function createGamePlay(\\n        uint gameID,\\n        Coin.Side coinSide,\\n        bytes32 proofOfChance\\n    ) internal {\\n        uint16 gamePlayID = playCounts[gameID] + 1;\\n        playRecord[gameID][msg.sender] = gamePlayID;\\n        proofOfChances[gameID][gamePlayID] = proofOfChance;\\n        players[gameID][coinSide].push(msg.sender);\\n        allPlayers[gameID].push(msg.sender);\\n        coinSideCounts[gameID][coinSide]++;\\n        playCounts[gameID]++;\\n\\n        emit GamePlayCreated(\\n            gameID,\\n            gamePlayID,\\n            msg.sender,\\n            coinSide,\\n            proofOfChance\\n        );\\n    }\\n\\n    function setNumberOfPlayers(uint gameID, uint16 numberOfPlayers) internal {\\n        numberOfPlayersPerGame[gameID] = numberOfPlayers;\\n    }\\n}\\n\",\"keccak256\":\"0x5c12aa9a7f44b6933853b97b2e13bc912b51f31a539cf7c458feca1d6f8be2e6\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/GameStatuses.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Game} from './Game.sol';\\n\\ncontract UsingGameStatuses {\\n    mapping(uint => Game.Status) statuses;\\n    mapping(uint => uint) expiryTimestamps;\\n\\n    error InvalidGameStatus(uint, Game.Status expected, Game.Status actual);\\n    error InvalidExpiryTimestamp();\\n\\n    modifier mustMatchGameStatus(uint gameID, Game.Status expectedGameStatus) {\\n        Game.Status actualGameStatus = getGameStatus(gameID);\\n\\n        if (actualGameStatus != expectedGameStatus) {\\n            revert InvalidGameStatus(\\n                gameID,\\n                expectedGameStatus,\\n                actualGameStatus\\n            );\\n        }\\n\\n        _;\\n    }\\n\\n    function setGameStatusAsAwaitingPlayers(\\n        uint gameID,\\n        uint expiryTimestamp\\n    ) internal {\\n        if (expiryTimestamp <= block.timestamp) {\\n            revert InvalidExpiryTimestamp();\\n        }\\n        expiryTimestamps[gameID] = expiryTimestamp;\\n    }\\n\\n    function setGameStatusAsAwaitingChancesUpload(uint gameID) internal {\\n        statuses[gameID] = Game.Status.AwaitingChancesUpload;\\n    }\\n\\n    function setGameStatusAsConcluded(uint gameID) internal {\\n        statuses[gameID] = Game.Status.Concluded;\\n    }\\n\\n    function getGameStatus(uint gameID) internal view returns (Game.Status) {\\n        if (expiryTimestamps[gameID] < block.timestamp) {\\n            return Game.Status.Expired;\\n        }\\n        return statuses[gameID];\\n    }\\n}\\n\",\"keccak256\":\"0x4d14c00c07909ab0d3790e53e6579dd4508c1aae1892f2ecce15174eaa1a3a8a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Coinflip/GameWagers.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Game} from './Game.sol';\\n\\ncontract UsingGameWagers {\\n    mapping(uint gameID => uint wager) wagers;\\n\\n    error InvalidWager();\\n\\n    modifier mustBeValidWager() {\\n        if (msg.value <= 0) {\\n            revert InvalidWager();\\n        }\\n\\n        _;\\n    }\\n\\n    function createGameWager(uint gameID, uint wager) internal {\\n        wagers[gameID] = wager;\\n    }\\n\\n    function getGameWager(uint gameID) internal view returns (uint) {\\n        return wagers[gameID];\\n    }\\n}\\n\",\"keccak256\":\"0x4b11d5fb38d2a3a0a8c4db9ab69b931b6cd467d8232a7c63239c01d2860fc5c7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/MaybeOperational.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from './Ownable.sol';\\n\\ncontract MaybeOperational is Ownable {\\n    bool private operational = true;\\n\\n    error InOperative();\\n\\n    /**\\n     * @dev Modifier that requires the \\\"operational\\\" boolean variable to be \\\"true\\\"\\n     *      This is used on all state changing functions to pause the contract in\\n     *      the event there is an issue that needs to be fixed\\n     */\\n    modifier mustBeOperational() {\\n        if (!operational) {\\n            revert InOperative();\\n        }\\n        _; // All modifiers require an \\\"_\\\" which indicates where the function body will be added\\n    }\\n\\n    /**\\n     * @dev Sets contract operations on/off\\n     *\\n     * When operational mode is disabled, all write transactions except for this one will fail\\n     */\\n    function setOperatingStatus(bool mode) external onlyOwner {\\n        operational = mode;\\n    }\\n}\\n\",\"keccak256\":\"0x0329bf36a87b533245fca7498ab54e8b5b4888d0d8db15dd43654c24a7427cc2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    /// The caller account is not authorized to perform an operation.\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev The owner is not a valid owner account.\\n    error OwnableInvalidOwner(address owner);\\n\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Internal function without access restriction.\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1367d6f82a5dae17c0599becdf70561d7153be0918bda90f8b92a921837f5db1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/ServiceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from './Ownable.sol';\\n\\ncontract UsingServiceProvider is Ownable {\\n    /// @dev due to charges for the minimum wager allowed\\n    /// expected to be high due to the gas fee for the minimum wager\\n    /// initialServiceCharges (at deployment):\\n    /// If transaction fee is $6\\n    uint8 public serviceChargePercent = 8;\\n\\n    error InvalidServiceChargePercent();\\n\\n    function updateServiceChargePercent(\\n        uint8 serviceChargePercent_\\n    ) external onlyOwner {\\n        if (serviceChargePercent_ >= 100) {\\n            revert InvalidServiceChargePercent();\\n        }\\n\\n        serviceChargePercent = serviceChargePercent_;\\n    }\\n\\n    /// @dev Returns the service provider wallet owner\\n    function getServiceProviderWallet() external view returns (address) {\\n        return owner();\\n    }\\n\\n    function getServiceCharge(uint amount) external view returns (uint) {\\n        return (amount * serviceChargePercent) / 100;\\n    }\\n\\n    function getSplitAmountAfterServiceChargeDeduction(\\n        uint amount,\\n        uint places\\n    ) internal view returns (uint) {\\n        uint splitAmount = amount / places;\\n        splitAmount =\\n            splitAmount -\\n            ((splitAmount * serviceChargePercent) / 100);\\n\\n        return splitAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x67626bd22030ab458116d707af73c6488b43942aa08af9bf01ee8b786e5b522e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from './Ownable.sol';\\nimport {UsingReentrancyGuard} from './Wallets/ReentrancyGuard.sol';\\n\\n/// TODO: Move to orisirisi-contracts when more games are introduced\\n/// TODO: Consider renaming to GameWallets\\n\\n/// @dev ProofOfChance Wallets supports only coinflip at the time of deployment\\n/// It acts as a regular wallet that can be 'Credited' and 'Debited'\\n/// More importantly, it allows ProofOfChance apps to 'CreditFromGame` or `DebitForGame` in\\n/// the context of a given game\\ncontract Wallets is UsingReentrancyGuard, Ownable {\\n    mapping(address => bool) apps;\\n    mapping(address app => mapping(uint gameID => uint balance)) gameBalances;\\n    mapping(address owner => uint amount) nonGameBalances;\\n\\n    event Credit(address indexed owner, uint amount);\\n    event Debit(address indexed owner, uint amount);\\n    event CreditFromGame(\\n        address indexed app,\\n        uint indexed gameID,\\n        address indexed owner,\\n        uint amount\\n    );\\n    event DebitForGame(\\n        address indexed app,\\n        uint indexed gameID,\\n        address indexed owner,\\n        uint amount\\n    );\\n\\n    error InsufficientFunds();\\n    error UnAuthorizedApp();\\n\\n    receive() external payable {\\n        nonGameBalances[msg.sender] += msg.value;\\n    }\\n\\n    function addApp(address app) external onlyOwner {\\n        apps[app] = true;\\n    }\\n\\n    function removeApp(address app) external onlyOwner {\\n        apps[app] = false;\\n    }\\n\\n    modifier onlyApp() {\\n        if (!apps[msg.sender]) {\\n            revert UnAuthorizedApp();\\n        }\\n        _;\\n    }\\n\\n    function debitForGame(\\n        uint gameID,\\n        address player,\\n        uint amount\\n    ) external onlyApp {\\n        if (nonGameBalances[player] < amount) {\\n            revert InsufficientFunds();\\n        }\\n        nonGameBalances[player] -= amount;\\n        address app = msg.sender;\\n        gameBalances[app][gameID] += amount;\\n\\n        emit DebitForGame(app, gameID, player, amount);\\n    }\\n\\n    /// @dev Credits player as though player manually credits themselves. A convenient function\\n    /// for cases where players send their ether to one of ProofOfChances' apps instead of the\\n    /// wallet. Those apps, will act as a proxy to then manually top up the player's wallet balance\\n    function creditPlayer(address player) external payable onlyApp {\\n        uint amount = msg.value;\\n        nonGameBalances[player] += amount;\\n        emit Credit(player, amount);\\n    }\\n\\n    function credit() external payable {\\n        address player = msg.sender;\\n        uint amount = msg.value;\\n        nonGameBalances[player] += amount;\\n        emit Credit(player, amount);\\n    }\\n\\n    function creditPlayers(address[] memory players) external payable {\\n        require(msg.value % players.length == 0);\\n        uint amountForEachPlayer = msg.value / players.length;\\n        for (uint i = 0; i < players.length; i++) {\\n            nonGameBalances[players[i]] += amountForEachPlayer;\\n        }\\n    }\\n\\n    function creditPlayersAndCreditAppTheRest(\\n        uint gameID,\\n        address[] memory players,\\n        uint amount\\n    ) external onlyApp {\\n        address app = msg.sender;\\n        require(gameBalances[app][gameID] > players.length * amount);\\n        creditPlayers(app, gameID, players, amount);\\n        creditAppTheRest(app, gameID);\\n    }\\n\\n    function creditPlayers(\\n        address app,\\n        uint gameID,\\n        address[] memory players,\\n        uint amount\\n    ) private {\\n        for (uint i = 0; i < players.length; i++) {\\n            address player = players[i];\\n            gameBalances[app][gameID] -= amount;\\n            nonGameBalances[player] += amount;\\n            emit CreditFromGame(app, gameID, player, amount);\\n        }\\n    }\\n\\n    function creditAppTheRest(address app, uint gameID) private {\\n        uint restAmount = gameBalances[app][gameID];\\n        address appOwner = owner();\\n        nonGameBalances[appOwner] = restAmount;\\n        gameBalances[app][gameID] = 0;\\n        emit CreditFromGame(app, gameID, appOwner, restAmount);\\n    }\\n\\n    function withdraw(uint amount) external nonReentrant {\\n        address owner = msg.sender;\\n        uint balance = nonGameBalances[owner];\\n        if (balance < amount) {\\n            revert InsufficientFunds();\\n        }\\n        nonGameBalances[owner] -= amount;\\n\\n        pay(owner, amount);\\n\\n        emit Debit(owner, amount);\\n    }\\n\\n    function withdrawAll() external nonReentrant {\\n        address owner = msg.sender;\\n        uint balance = nonGameBalances[owner];\\n        if (balance == 0) {\\n            revert InsufficientFunds();\\n        }\\n        nonGameBalances[owner] = 0;\\n\\n        pay(owner, balance);\\n\\n        emit Debit(owner, balance);\\n    }\\n\\n    function getGameBalance(\\n        address app,\\n        uint gameID\\n    ) external view returns (uint) {\\n        return gameBalances[app][gameID];\\n    }\\n\\n    function getBalance(address owner) external view returns (uint) {\\n        return nonGameBalances[owner];\\n    }\\n\\n    function getTotalBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function pay(address to, uint256 amount) private {\\n        (bool sent, ) = to.call{value: amount}('');\\n        require(sent);\\n    }\\n}\\n\",\"keccak256\":\"0xace03f91cca8660b9065aeef652648a440d1aed54cffd2478322264e36923ddf\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract UsingReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x03348f8378b6a364463e89147e0cc1fca3ae32d263688341a428b18f55f19167\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600a60146101000a81548160ff0219169083151502179055506008600a60156101000a81548160ff021916908360ff1602179055503480156200004857600080fd5b50604051620030493803806200304983398181016040528101906200006e919062000297565b6200007f33620000ed60201b60201c565b82600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548161ffff021916908361ffff16021790555080600b81905550505050620002f3565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e582620001b8565b9050919050565b620001f781620001d8565b81146200020357600080fd5b50565b6000815190506200021781620001ec565b92915050565b600061ffff82169050919050565b62000236816200021d565b81146200024257600080fd5b50565b60008151905062000256816200022b565b92915050565b6000819050919050565b62000271816200025c565b81146200027d57600080fd5b50565b600081519050620002918162000266565b92915050565b600080600060608486031215620002b357620002b2620001b3565b5b6000620002c38682870162000206565b9350506020620002d68682870162000245565b9250506040620002e98682870162000280565b9150509250925092565b612d4680620003036000396000f3fe6080604052600436106101235760003560e01c80637cb4baf9116100a0578063cfd9520a11610064578063cfd9520a146103d7578063d2f4a50a14610400578063f2fde38b1461042b578063fb632b7c14610454578063fee445cc1461047f57610132565b80637cb4baf9146103025780637d627c161461032d5780638da5cb5b14610356578063bb9c3f2b14610381578063c122212f146103ac57610132565b806332d54997116100e757806332d54997146101f757806339a21b0b1461023457806353e636fc1461025d578063728fdffa1461029a5780637737f50d146102c557610132565b8063110466ed1461013757806318e70bd8146101605780631a7d9cad146101895780632851a5cf146101a55780632cda6e77146101ce57610132565b366101325761013061049b565b005b600080fd5b34801561014357600080fd5b5061015e60048036038101906101599190611ca6565b61052b565b005b34801561016c57600080fd5b5061018760048036038101906101829190611f35565b610550565b005b6101a3600480360381019061019e9190612026565b610931565b005b3480156101b157600080fd5b506101cc60048036038101906101c791906120ff565b610b48565b005b3480156101da57600080fd5b506101f560048036038101906101f09190612165565b610b94565b005b34801561020357600080fd5b5061021e60048036038101906102199190612192565b610bf7565b60405161022b91906121ce565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906122ac565b610c2a565b005b34801561026957600080fd5b50610284600480360381019061027f91906122f5565b610c76565b6040516102919190612344565b60405180910390f35b3480156102a657600080fd5b506102af610c9b565b6040516102bc919061236e565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e79190612192565b610caf565b6040516102f9919061236e565b60405180910390f35b34801561030e57600080fd5b50610317610cd0565b6040516103249190612398565b60405180910390f35b34801561033957600080fd5b50610354600480360381019061034f91906123b3565b610ce3565b005b34801561036257600080fd5b5061036b610d0b565b6040516103789190612401565b60405180910390f35b34801561038d57600080fd5b50610396610d35565b6040516103a391906121ce565b60405180910390f35b3480156103b857600080fd5b506103c1610d3b565b6040516103ce9190612401565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f991906123b3565b610d4a565b005b34801561040c57600080fd5b50610415610d60565b604051610422919061247b565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d91906124c2565b610d86565b005b34801561046057600080fd5b50610469610d9a565b60405161047691906121ce565b60405180910390f35b610499600480360381019061049491906124ef565b610da0565b005b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312314e9734336040518363ffffffff1660e01b81526004016104f79190612401565b6000604051808303818588803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b5050505050565b61053361110c565b80600a60146101000a81548160ff02191690831515021790555050565b61055861110c565b816002600061056683611185565b905081600381111561057b5761057a612542565b5b81600381111561058e5761058d612542565b5b146105d4578282826040517f7765da350000000000000000000000000000000000000000000000000000000081526004016105cb939291906125b9565b60405180910390fd5b600080600090505b6001600088815260200190815260200160002060009054906101000a900461ffff1661ffff168161ffff161015610804576000868261ffff1681518110610626576106256125f0565b5b60200260200101519050600060018361063f919061264e565b9050600660008a815260200190815260200160002060008261ffff1661ffff1681526020019081526020016000205460028360405161067e91906126f5565b602060405180830381855afa15801561069b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106be9190612721565b146106f5576040517f402fb0a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008280602001905181019061070b91906127fe565b50905060005b60108160ff1610156107b6576000828260ff1660108110610735576107346125f0565b5b1a60f81b9050600060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361076e57506107b6565b6000600181111561078257610781612542565b5b87600181111561079557610794612542565b5b036107a357600196506107a8565b600096505b508080600101915050610711565b508161ffff168a7fa1ffc642177ab118fa3d9c64797cbc129024fdd953e7fc92c64eb358d2eaccfa856040516107ec9190612888565b60405180910390a350505080806001019150506105dc565b50600060036000888152602001908152602001600020600083600181111561082f5761082e612542565b5b600181111561084157610840612542565b5b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610885575b5050505050905060006108e288836111d4565b90506108ed886112c3565b877fa3f5520e27ebcfe38fd78c3854e39d00e8e9f7061551105f86fe8d1596ef84b8848360405161091f9291906128f2565b60405180910390a25050505050505050565b600a60149054906101000a900460ff16610977576040517f133d613e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b66040518060400160405280600881526020017f576167657220257300000000000000000000000000000000000000000000000081525086611302565b600260ff168461ffff1610156109f8576040517f72cc005700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a3b6040518060400160405280601281526020017f6e756d6265724f66506c617965727320257300000000000000000000000000008152508561ffff16611302565b600c60009054906101000a900461ffff1661ffff168461ffff161115610a8d576040517f5473ed1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600d54610a9e919061291b565b9050610aa861139e565b610ab281876113b2565b610abc81876113ce565b610ac68186611463565b610ad08185611495565b600d600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff16817fff4ce5d936207f27c07633704e6d1a8aa0d1ae75aad73192582381fe9a2ed20687878a604051610b2d9392919061294f565b60405180910390a3610b408184846114ea565b505050505050565b610b5061110c565b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b9c61110c565b60648160ff1610610bd9576040517f4756d23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60156101000a81548160ff021916908360ff16021790555050565b60006064600a60159054906101000a900460ff1660ff1683610c199190612986565b610c2391906129f7565b9050919050565b60005b81518160ff161015610c7257610c5f828260ff1681518110610c5257610c516125f0565b5b60200260200101516117fc565b8080610c6a90612a28565b915050610c2d565b5050565b6006602052816000526040600020602052806000526040600020600091509150505481565b600c60009054906101000a900461ffff1681565b60016020528060005260406000206000915054906101000a900461ffff1681565b600a60159054906101000a900460ff1681565b610ceb61110c565b80600c60006101000a81548161ffff021916908361ffff16021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b5481565b6000610d45610d0b565b905090565b610d5261110c565b8061ffff16600b8190555050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d8e61110c565b610d9781611a2c565b50565b600d5481565b600a60149054906101000a900460ff16610de6576040517f133d613e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600080610df383611185565b9050816003811115610e0857610e07612542565b5b816003811115610e1b57610e1a612542565b5b14610e61578282826040517f7765da35000000000000000000000000000000000000000000000000000000008152600401610e58939291906125b9565b60405180910390fd5b858560006001600084815260200190815260200160002060009054906101000a900461ffff166002600085815260200190815260200160002060009054906101000a900461ffff16610eb39190612a51565b90506000600460008581526020019081526020016000206000806001811115610edf57610ede612542565b5b6001811115610ef157610ef0612542565b5b815260200190815260200160002060009054906101000a900461ffff1690506000600460008681526020019081526020016000206000600180811115610f3a57610f39612542565b5b6001811115610f4c57610f4b612542565b5b815260200190815260200160002060009054906101000a900461ffff16905060018361ffff16148015610f92575060008261ffff161480610f91575060008161ffff16145b5b1561101c576000808361ffff1603610fad5760009050610fb2565b600190505b806001811115610fc557610fc4612542565b5b856001811115610fd857610fd7612542565b5b1461101a57806040517f14759b500000000000000000000000000000000000000000000000000000000081526004016110119190612a87565b60405180910390fd5b505b8a600080600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff16905060008161ffff1611156110c957806040517fccfdba1f0000000000000000000000000000000000000000000000000000000081526004016110c0919061236e565b60405180910390fd5b6110d161139e565b60006110dc8e611af2565b90506110e88e826113ce565b6110f38e8e8e6114ea565b6110fc8e611b0f565b5050505050505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff1661112b610d0b565b73ffffffffffffffffffffffffffffffffffffffff161461118357336040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161117a9190612401565b60405180910390fd5b565b600042600960008481526020019081526020016000205410156111ab57600190506111cf565b6008600083815260200190815260200160002060009054906101000a900460ff1690505b919050565b6000806111e084611af2565b905060006001600086815260200190815260200160002060009054906101000a900461ffff1661ffff16826112159190612986565b90506000611224828651611b79565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663155373708787846040518463ffffffff1660e01b815260040161128593929190612b60565b600060405180830381600087803b15801561129f57600080fd5b505af11580156112b3573d6000803e3d6000fd5b5050505080935050505092915050565b60036008600083815260200190815260200160002060006101000a81548160ff021916908360038111156112fa576112f9612542565b5b021790555050565b61139a8282604051602401611318929190612bf3565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bcb565b5050565b60003411156113b0576113af61049b565b5b565b8060076000848152602001908152602001600020819055505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663037e34e58333846040518463ffffffff1660e01b815260040161142d93929190612c23565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050505050565b806002600084815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055505050565b4281116114ce576040517f4257cab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060096000848152602001908152602001600020819055505050565b6000600180600086815260200190815260200160002060009054906101000a900461ffff16611519919061264e565b90508060008086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff160217905550816006600086815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020819055506003600085815260200190815260200160002060008460018111156115de576115dd612542565b5b60018111156115f0576115ef612542565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056000858152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600085815260200190815260200160002060008460018111156116fb576116fa612542565b5b600181111561170d5761170c612542565b5b8152602001908152602001600020600081819054906101000a900461ffff168092919061173990612c5a565b91906101000a81548161ffff021916908361ffff1602179055505060016000858152602001908152602001600020600081819054906101000a900461ffff168092919061178590612c5a565b91906101000a81548161ffff021916908361ffff160217905550503373ffffffffffffffffffffffffffffffffffffffff168161ffff16857fe7b36541da149ae31f5dd2085cea9f899aa58f8b33bb0db2be6acfe1d31515e586866040516117ee929190612c84565b60405180910390a450505050565b61180461110c565b806001600061181283611185565b905081600381111561182757611826612542565b5b81600381111561183a57611839612542565b5b14611880578282826040517f7765da35000000000000000000000000000000000000000000000000000000008152600401611877939291906125b9565b60405180910390fd5b60006005600086815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561191557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118cb575b5050505050905060008151905060008161ffff1661193288611af2565b61193c9190612986565b9050600061194e828461ffff16611b79565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663155373708986846040518463ffffffff1660e01b81526004016119af93929190612b60565b600060405180830381600087803b1580156119c957600080fd5b505af11580156119dd573d6000803e3d6000fd5b505050506119ea886112c3565b877f483a9ad42b66e69a3096814ad798345a0ed09694552a5b8a04abce8a0ba6fa2582604051611a1a91906121ce565b60405180910390a25050505050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060076000838152602001908152602001600020549050919050565b60006001600083815260200190815260200160002060009054906101000a900461ffff16905060006002600084815260200190815260200160002060009054906101000a900461ffff1690508061ffff168261ffff1603611b7457611b7383611be5565b5b505050565b6000808284611b8891906129f7565b90506064600a60159054906101000a900460ff1660ff1682611baa9190612986565b611bb491906129f7565b81611bbf9190612cad565b90508091505092915050565b611be281611bda611c24611c45565b63ffffffff16565b50565b60026008600083815260200190815260200160002060006101000a81548160ff02191690836003811115611c1c57611c1b612542565b5b021790555050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611c50819050919050565b611c58612ce1565b565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b611c8381611c6e565b8114611c8e57600080fd5b50565b600081359050611ca081611c7a565b92915050565b600060208284031215611cbc57611cbb611c64565b5b6000611cca84828501611c91565b91505092915050565b6000819050919050565b611ce681611cd3565b8114611cf157600080fd5b50565b600081359050611d0381611cdd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d5782611d0e565b810181811067ffffffffffffffff82111715611d7657611d75611d1f565b5b80604052505050565b6000611d89611c5a565b9050611d958282611d4e565b919050565b600067ffffffffffffffff821115611db557611db4611d1f565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611deb57611dea611d1f565b5b611df482611d0e565b9050602081019050919050565b82818337600083830152505050565b6000611e23611e1e84611dd0565b611d7f565b905082815260208101848484011115611e3f57611e3e611dcb565b5b611e4a848285611e01565b509392505050565b600082601f830112611e6757611e66611d09565b5b8135611e77848260208601611e10565b91505092915050565b6000611e93611e8e84611d9a565b611d7f565b90508083825260208201905060208402830185811115611eb657611eb5611dc6565b5b835b81811015611efd57803567ffffffffffffffff811115611edb57611eda611d09565b5b808601611ee88982611e52565b85526020850194505050602081019050611eb8565b5050509392505050565b600082601f830112611f1c57611f1b611d09565b5b8135611f2c848260208601611e80565b91505092915050565b60008060408385031215611f4c57611f4b611c64565b5b6000611f5a85828601611cf4565b925050602083013567ffffffffffffffff811115611f7b57611f7a611c69565b5b611f8785828601611f07565b9150509250929050565b600061ffff82169050919050565b611fa881611f91565b8114611fb357600080fd5b50565b600081359050611fc581611f9f565b92915050565b60028110611fd857600080fd5b50565b600081359050611fea81611fcb565b92915050565b6000819050919050565b61200381611ff0565b811461200e57600080fd5b50565b60008135905061202081611ffa565b92915050565b600080600080600060a0868803121561204257612041611c64565b5b600061205088828901611cf4565b955050602061206188828901611fb6565b945050604061207288828901611cf4565b935050606061208388828901611fdb565b925050608061209488828901612011565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120cc826120a1565b9050919050565b6120dc816120c1565b81146120e757600080fd5b50565b6000813590506120f9816120d3565b92915050565b60006020828403121561211557612114611c64565b5b6000612123848285016120ea565b91505092915050565b600060ff82169050919050565b6121428161212c565b811461214d57600080fd5b50565b60008135905061215f81612139565b92915050565b60006020828403121561217b5761217a611c64565b5b600061218984828501612150565b91505092915050565b6000602082840312156121a8576121a7611c64565b5b60006121b684828501611cf4565b91505092915050565b6121c881611cd3565b82525050565b60006020820190506121e360008301846121bf565b92915050565b600067ffffffffffffffff82111561220457612203611d1f565b5b602082029050602081019050919050565b6000612228612223846121e9565b611d7f565b9050808382526020820190506020840283018581111561224b5761224a611dc6565b5b835b8181101561227457806122608882611cf4565b84526020840193505060208101905061224d565b5050509392505050565b600082601f83011261229357612292611d09565b5b81356122a3848260208601612215565b91505092915050565b6000602082840312156122c2576122c1611c64565b5b600082013567ffffffffffffffff8111156122e0576122df611c69565b5b6122ec8482850161227e565b91505092915050565b6000806040838503121561230c5761230b611c64565b5b600061231a85828601611cf4565b925050602061232b85828601611fb6565b9150509250929050565b61233e81611ff0565b82525050565b60006020820190506123596000830184612335565b92915050565b61236881611f91565b82525050565b6000602082019050612383600083018461235f565b92915050565b6123928161212c565b82525050565b60006020820190506123ad6000830184612389565b92915050565b6000602082840312156123c9576123c8611c64565b5b60006123d784828501611fb6565b91505092915050565b60006123eb826120a1565b9050919050565b6123fb816123e0565b82525050565b600060208201905061241660008301846123f2565b92915050565b6000819050919050565b600061244161243c612437846120a1565b61241c565b6120a1565b9050919050565b600061245382612426565b9050919050565b600061246582612448565b9050919050565b6124758161245a565b82525050565b6000602082019050612490600083018461246c565b92915050565b61249f816123e0565b81146124aa57600080fd5b50565b6000813590506124bc81612496565b92915050565b6000602082840312156124d8576124d7611c64565b5b60006124e6848285016124ad565b91505092915050565b60008060006060848603121561250857612507611c64565b5b600061251686828701611cf4565b935050602061252786828701611fdb565b925050604061253886828701612011565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061258257612581612542565b5b50565b600081905061259382612571565b919050565b60006125a382612585565b9050919050565b6125b381612598565b82525050565b60006060820190506125ce60008301866121bf565b6125db60208301856125aa565b6125e860408301846125aa565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061265982611f91565b915061266483611f91565b9250828201905061ffff81111561267e5761267d61261f565b5b92915050565b600081519050919050565b600081905092915050565b60005b838110156126b857808201518184015260208101905061269d565b60008484015250505050565b60006126cf82612684565b6126d9818561268f565b93506126e981856020860161269a565b80840191505092915050565b600061270182846126c4565b915081905092915050565b60008151905061271b81611ffa565b92915050565b60006020828403121561273757612736611c64565b5b60006127458482850161270c565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6127838161274e565b811461278e57600080fd5b50565b6000815190506127a08161277a565b92915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6127db816127a6565b81146127e657600080fd5b50565b6000815190506127f8816127d2565b92915050565b6000806040838503121561281557612814611c64565b5b600061282385828601612791565b9250506020612834858286016127e9565b9150509250929050565b600082825260208201905092915050565b600061285a82612684565b612864818561283e565b935061287481856020860161269a565b61287d81611d0e565b840191505092915050565b600060208201905081810360008301526128a2818461284f565b905092915050565b600281106128bb576128ba612542565b5b50565b60008190506128cc826128aa565b919050565b60006128dc826128be565b9050919050565b6128ec816128d1565b82525050565b600060408201905061290760008301856128e3565b61291460208301846121bf565b9392505050565b600061292682611cd3565b915061293183611cd3565b92508282019050808211156129495761294861261f565b5b92915050565b6000606082019050612964600083018661235f565b61297160208301856121bf565b61297e60408301846121bf565b949350505050565b600061299182611cd3565b915061299c83611cd3565b92508282026129aa81611cd3565b915082820484148315176129c1576129c061261f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a0282611cd3565b9150612a0d83611cd3565b925082612a1d57612a1c6129c8565b5b828204905092915050565b6000612a338261212c565b915060ff8203612a4657612a4561261f565b5b600182019050919050565b6000612a5c82611f91565b9150612a6783611f91565b9250828203905061ffff811115612a8157612a8061261f565b5b92915050565b6000602082019050612a9c60008301846128e3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ad7816123e0565b82525050565b6000612ae98383612ace565b60208301905092915050565b6000602082019050919050565b6000612b0d82612aa2565b612b178185612aad565b9350612b2283612abe565b8060005b83811015612b53578151612b3a8882612add565b9750612b4583612af5565b925050600181019050612b26565b5085935050505092915050565b6000606082019050612b7560008301866121bf565b8181036020830152612b878185612b02565b9050612b9660408301846121bf565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612bc582612b9e565b612bcf8185612ba9565b9350612bdf81856020860161269a565b612be881611d0e565b840191505092915050565b60006040820190508181036000830152612c0d8185612bba565b9050612c1c60208301846121bf565b9392505050565b6000606082019050612c3860008301866121bf565b612c4560208301856123f2565b612c5260408301846121bf565b949350505050565b6000612c6582611f91565b915061ffff8203612c7957612c7861261f565b5b600182019050919050565b6000604082019050612c9960008301856128e3565b612ca66020830184612335565b9392505050565b6000612cb882611cd3565b9150612cc383611cd3565b9250828203905081811115612cdb57612cda61261f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea26469706673582212206b3bfa1e3bf2152e164f0d5c2a59406c69f07c9897bc7b1d7e0865c3f4aaad2a64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80637cb4baf9116100a0578063cfd9520a11610064578063cfd9520a146103d7578063d2f4a50a14610400578063f2fde38b1461042b578063fb632b7c14610454578063fee445cc1461047f57610132565b80637cb4baf9146103025780637d627c161461032d5780638da5cb5b14610356578063bb9c3f2b14610381578063c122212f146103ac57610132565b806332d54997116100e757806332d54997146101f757806339a21b0b1461023457806353e636fc1461025d578063728fdffa1461029a5780637737f50d146102c557610132565b8063110466ed1461013757806318e70bd8146101605780631a7d9cad146101895780632851a5cf146101a55780632cda6e77146101ce57610132565b366101325761013061049b565b005b600080fd5b34801561014357600080fd5b5061015e60048036038101906101599190611ca6565b61052b565b005b34801561016c57600080fd5b5061018760048036038101906101829190611f35565b610550565b005b6101a3600480360381019061019e9190612026565b610931565b005b3480156101b157600080fd5b506101cc60048036038101906101c791906120ff565b610b48565b005b3480156101da57600080fd5b506101f560048036038101906101f09190612165565b610b94565b005b34801561020357600080fd5b5061021e60048036038101906102199190612192565b610bf7565b60405161022b91906121ce565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906122ac565b610c2a565b005b34801561026957600080fd5b50610284600480360381019061027f91906122f5565b610c76565b6040516102919190612344565b60405180910390f35b3480156102a657600080fd5b506102af610c9b565b6040516102bc919061236e565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e79190612192565b610caf565b6040516102f9919061236e565b60405180910390f35b34801561030e57600080fd5b50610317610cd0565b6040516103249190612398565b60405180910390f35b34801561033957600080fd5b50610354600480360381019061034f91906123b3565b610ce3565b005b34801561036257600080fd5b5061036b610d0b565b6040516103789190612401565b60405180910390f35b34801561038d57600080fd5b50610396610d35565b6040516103a391906121ce565b60405180910390f35b3480156103b857600080fd5b506103c1610d3b565b6040516103ce9190612401565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f991906123b3565b610d4a565b005b34801561040c57600080fd5b50610415610d60565b604051610422919061247b565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d91906124c2565b610d86565b005b34801561046057600080fd5b50610469610d9a565b60405161047691906121ce565b60405180910390f35b610499600480360381019061049491906124ef565b610da0565b005b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312314e9734336040518363ffffffff1660e01b81526004016104f79190612401565b6000604051808303818588803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b5050505050565b61053361110c565b80600a60146101000a81548160ff02191690831515021790555050565b61055861110c565b816002600061056683611185565b905081600381111561057b5761057a612542565b5b81600381111561058e5761058d612542565b5b146105d4578282826040517f7765da350000000000000000000000000000000000000000000000000000000081526004016105cb939291906125b9565b60405180910390fd5b600080600090505b6001600088815260200190815260200160002060009054906101000a900461ffff1661ffff168161ffff161015610804576000868261ffff1681518110610626576106256125f0565b5b60200260200101519050600060018361063f919061264e565b9050600660008a815260200190815260200160002060008261ffff1661ffff1681526020019081526020016000205460028360405161067e91906126f5565b602060405180830381855afa15801561069b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106be9190612721565b146106f5576040517f402fb0a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008280602001905181019061070b91906127fe565b50905060005b60108160ff1610156107b6576000828260ff1660108110610735576107346125f0565b5b1a60f81b9050600060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361076e57506107b6565b6000600181111561078257610781612542565b5b87600181111561079557610794612542565b5b036107a357600196506107a8565b600096505b508080600101915050610711565b508161ffff168a7fa1ffc642177ab118fa3d9c64797cbc129024fdd953e7fc92c64eb358d2eaccfa856040516107ec9190612888565b60405180910390a350505080806001019150506105dc565b50600060036000888152602001908152602001600020600083600181111561082f5761082e612542565b5b600181111561084157610840612542565b5b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610885575b5050505050905060006108e288836111d4565b90506108ed886112c3565b877fa3f5520e27ebcfe38fd78c3854e39d00e8e9f7061551105f86fe8d1596ef84b8848360405161091f9291906128f2565b60405180910390a25050505050505050565b600a60149054906101000a900460ff16610977576040517f133d613e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b66040518060400160405280600881526020017f576167657220257300000000000000000000000000000000000000000000000081525086611302565b600260ff168461ffff1610156109f8576040517f72cc005700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a3b6040518060400160405280601281526020017f6e756d6265724f66506c617965727320257300000000000000000000000000008152508561ffff16611302565b600c60009054906101000a900461ffff1661ffff168461ffff161115610a8d576040517f5473ed1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600d54610a9e919061291b565b9050610aa861139e565b610ab281876113b2565b610abc81876113ce565b610ac68186611463565b610ad08185611495565b600d600081548092919060010191905055503373ffffffffffffffffffffffffffffffffffffffff16817fff4ce5d936207f27c07633704e6d1a8aa0d1ae75aad73192582381fe9a2ed20687878a604051610b2d9392919061294f565b60405180910390a3610b408184846114ea565b505050505050565b610b5061110c565b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b9c61110c565b60648160ff1610610bd9576040517f4756d23c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60156101000a81548160ff021916908360ff16021790555050565b60006064600a60159054906101000a900460ff1660ff1683610c199190612986565b610c2391906129f7565b9050919050565b60005b81518160ff161015610c7257610c5f828260ff1681518110610c5257610c516125f0565b5b60200260200101516117fc565b8080610c6a90612a28565b915050610c2d565b5050565b6006602052816000526040600020602052806000526040600020600091509150505481565b600c60009054906101000a900461ffff1681565b60016020528060005260406000206000915054906101000a900461ffff1681565b600a60159054906101000a900460ff1681565b610ceb61110c565b80600c60006101000a81548161ffff021916908361ffff16021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b5481565b6000610d45610d0b565b905090565b610d5261110c565b8061ffff16600b8190555050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d8e61110c565b610d9781611a2c565b50565b600d5481565b600a60149054906101000a900460ff16610de6576040517f133d613e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600080610df383611185565b9050816003811115610e0857610e07612542565b5b816003811115610e1b57610e1a612542565b5b14610e61578282826040517f7765da35000000000000000000000000000000000000000000000000000000008152600401610e58939291906125b9565b60405180910390fd5b858560006001600084815260200190815260200160002060009054906101000a900461ffff166002600085815260200190815260200160002060009054906101000a900461ffff16610eb39190612a51565b90506000600460008581526020019081526020016000206000806001811115610edf57610ede612542565b5b6001811115610ef157610ef0612542565b5b815260200190815260200160002060009054906101000a900461ffff1690506000600460008681526020019081526020016000206000600180811115610f3a57610f39612542565b5b6001811115610f4c57610f4b612542565b5b815260200190815260200160002060009054906101000a900461ffff16905060018361ffff16148015610f92575060008261ffff161480610f91575060008161ffff16145b5b1561101c576000808361ffff1603610fad5760009050610fb2565b600190505b806001811115610fc557610fc4612542565b5b856001811115610fd857610fd7612542565b5b1461101a57806040517f14759b500000000000000000000000000000000000000000000000000000000081526004016110119190612a87565b60405180910390fd5b505b8a600080600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff16905060008161ffff1611156110c957806040517fccfdba1f0000000000000000000000000000000000000000000000000000000081526004016110c0919061236e565b60405180910390fd5b6110d161139e565b60006110dc8e611af2565b90506110e88e826113ce565b6110f38e8e8e6114ea565b6110fc8e611b0f565b5050505050505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff1661112b610d0b565b73ffffffffffffffffffffffffffffffffffffffff161461118357336040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161117a9190612401565b60405180910390fd5b565b600042600960008481526020019081526020016000205410156111ab57600190506111cf565b6008600083815260200190815260200160002060009054906101000a900460ff1690505b919050565b6000806111e084611af2565b905060006001600086815260200190815260200160002060009054906101000a900461ffff1661ffff16826112159190612986565b90506000611224828651611b79565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663155373708787846040518463ffffffff1660e01b815260040161128593929190612b60565b600060405180830381600087803b15801561129f57600080fd5b505af11580156112b3573d6000803e3d6000fd5b5050505080935050505092915050565b60036008600083815260200190815260200160002060006101000a81548160ff021916908360038111156112fa576112f9612542565b5b021790555050565b61139a8282604051602401611318929190612bf3565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bcb565b5050565b60003411156113b0576113af61049b565b5b565b8060076000848152602001908152602001600020819055505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663037e34e58333846040518463ffffffff1660e01b815260040161142d93929190612c23565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050505050565b806002600084815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055505050565b4281116114ce576040517f4257cab200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060096000848152602001908152602001600020819055505050565b6000600180600086815260200190815260200160002060009054906101000a900461ffff16611519919061264e565b90508060008086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff160217905550816006600086815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020819055506003600085815260200190815260200160002060008460018111156115de576115dd612542565b5b60018111156115f0576115ef612542565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056000858152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600085815260200190815260200160002060008460018111156116fb576116fa612542565b5b600181111561170d5761170c612542565b5b8152602001908152602001600020600081819054906101000a900461ffff168092919061173990612c5a565b91906101000a81548161ffff021916908361ffff1602179055505060016000858152602001908152602001600020600081819054906101000a900461ffff168092919061178590612c5a565b91906101000a81548161ffff021916908361ffff160217905550503373ffffffffffffffffffffffffffffffffffffffff168161ffff16857fe7b36541da149ae31f5dd2085cea9f899aa58f8b33bb0db2be6acfe1d31515e586866040516117ee929190612c84565b60405180910390a450505050565b61180461110c565b806001600061181283611185565b905081600381111561182757611826612542565b5b81600381111561183a57611839612542565b5b14611880578282826040517f7765da35000000000000000000000000000000000000000000000000000000008152600401611877939291906125b9565b60405180910390fd5b60006005600086815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561191557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118cb575b5050505050905060008151905060008161ffff1661193288611af2565b61193c9190612986565b9050600061194e828461ffff16611b79565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663155373708986846040518463ffffffff1660e01b81526004016119af93929190612b60565b600060405180830381600087803b1580156119c957600080fd5b505af11580156119dd573d6000803e3d6000fd5b505050506119ea886112c3565b877f483a9ad42b66e69a3096814ad798345a0ed09694552a5b8a04abce8a0ba6fa2582604051611a1a91906121ce565b60405180910390a25050505050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060076000838152602001908152602001600020549050919050565b60006001600083815260200190815260200160002060009054906101000a900461ffff16905060006002600084815260200190815260200160002060009054906101000a900461ffff1690508061ffff168261ffff1603611b7457611b7383611be5565b5b505050565b6000808284611b8891906129f7565b90506064600a60159054906101000a900460ff1660ff1682611baa9190612986565b611bb491906129f7565b81611bbf9190612cad565b90508091505092915050565b611be281611bda611c24611c45565b63ffffffff16565b50565b60026008600083815260200190815260200160002060006101000a81548160ff02191690836003811115611c1c57611c1b612542565b5b021790555050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611c50819050919050565b611c58612ce1565b565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b611c8381611c6e565b8114611c8e57600080fd5b50565b600081359050611ca081611c7a565b92915050565b600060208284031215611cbc57611cbb611c64565b5b6000611cca84828501611c91565b91505092915050565b6000819050919050565b611ce681611cd3565b8114611cf157600080fd5b50565b600081359050611d0381611cdd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d5782611d0e565b810181811067ffffffffffffffff82111715611d7657611d75611d1f565b5b80604052505050565b6000611d89611c5a565b9050611d958282611d4e565b919050565b600067ffffffffffffffff821115611db557611db4611d1f565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611deb57611dea611d1f565b5b611df482611d0e565b9050602081019050919050565b82818337600083830152505050565b6000611e23611e1e84611dd0565b611d7f565b905082815260208101848484011115611e3f57611e3e611dcb565b5b611e4a848285611e01565b509392505050565b600082601f830112611e6757611e66611d09565b5b8135611e77848260208601611e10565b91505092915050565b6000611e93611e8e84611d9a565b611d7f565b90508083825260208201905060208402830185811115611eb657611eb5611dc6565b5b835b81811015611efd57803567ffffffffffffffff811115611edb57611eda611d09565b5b808601611ee88982611e52565b85526020850194505050602081019050611eb8565b5050509392505050565b600082601f830112611f1c57611f1b611d09565b5b8135611f2c848260208601611e80565b91505092915050565b60008060408385031215611f4c57611f4b611c64565b5b6000611f5a85828601611cf4565b925050602083013567ffffffffffffffff811115611f7b57611f7a611c69565b5b611f8785828601611f07565b9150509250929050565b600061ffff82169050919050565b611fa881611f91565b8114611fb357600080fd5b50565b600081359050611fc581611f9f565b92915050565b60028110611fd857600080fd5b50565b600081359050611fea81611fcb565b92915050565b6000819050919050565b61200381611ff0565b811461200e57600080fd5b50565b60008135905061202081611ffa565b92915050565b600080600080600060a0868803121561204257612041611c64565b5b600061205088828901611cf4565b955050602061206188828901611fb6565b945050604061207288828901611cf4565b935050606061208388828901611fdb565b925050608061209488828901612011565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120cc826120a1565b9050919050565b6120dc816120c1565b81146120e757600080fd5b50565b6000813590506120f9816120d3565b92915050565b60006020828403121561211557612114611c64565b5b6000612123848285016120ea565b91505092915050565b600060ff82169050919050565b6121428161212c565b811461214d57600080fd5b50565b60008135905061215f81612139565b92915050565b60006020828403121561217b5761217a611c64565b5b600061218984828501612150565b91505092915050565b6000602082840312156121a8576121a7611c64565b5b60006121b684828501611cf4565b91505092915050565b6121c881611cd3565b82525050565b60006020820190506121e360008301846121bf565b92915050565b600067ffffffffffffffff82111561220457612203611d1f565b5b602082029050602081019050919050565b6000612228612223846121e9565b611d7f565b9050808382526020820190506020840283018581111561224b5761224a611dc6565b5b835b8181101561227457806122608882611cf4565b84526020840193505060208101905061224d565b5050509392505050565b600082601f83011261229357612292611d09565b5b81356122a3848260208601612215565b91505092915050565b6000602082840312156122c2576122c1611c64565b5b600082013567ffffffffffffffff8111156122e0576122df611c69565b5b6122ec8482850161227e565b91505092915050565b6000806040838503121561230c5761230b611c64565b5b600061231a85828601611cf4565b925050602061232b85828601611fb6565b9150509250929050565b61233e81611ff0565b82525050565b60006020820190506123596000830184612335565b92915050565b61236881611f91565b82525050565b6000602082019050612383600083018461235f565b92915050565b6123928161212c565b82525050565b60006020820190506123ad6000830184612389565b92915050565b6000602082840312156123c9576123c8611c64565b5b60006123d784828501611fb6565b91505092915050565b60006123eb826120a1565b9050919050565b6123fb816123e0565b82525050565b600060208201905061241660008301846123f2565b92915050565b6000819050919050565b600061244161243c612437846120a1565b61241c565b6120a1565b9050919050565b600061245382612426565b9050919050565b600061246582612448565b9050919050565b6124758161245a565b82525050565b6000602082019050612490600083018461246c565b92915050565b61249f816123e0565b81146124aa57600080fd5b50565b6000813590506124bc81612496565b92915050565b6000602082840312156124d8576124d7611c64565b5b60006124e6848285016124ad565b91505092915050565b60008060006060848603121561250857612507611c64565b5b600061251686828701611cf4565b935050602061252786828701611fdb565b925050604061253886828701612011565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061258257612581612542565b5b50565b600081905061259382612571565b919050565b60006125a382612585565b9050919050565b6125b381612598565b82525050565b60006060820190506125ce60008301866121bf565b6125db60208301856125aa565b6125e860408301846125aa565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061265982611f91565b915061266483611f91565b9250828201905061ffff81111561267e5761267d61261f565b5b92915050565b600081519050919050565b600081905092915050565b60005b838110156126b857808201518184015260208101905061269d565b60008484015250505050565b60006126cf82612684565b6126d9818561268f565b93506126e981856020860161269a565b80840191505092915050565b600061270182846126c4565b915081905092915050565b60008151905061271b81611ffa565b92915050565b60006020828403121561273757612736611c64565b5b60006127458482850161270c565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6127838161274e565b811461278e57600080fd5b50565b6000815190506127a08161277a565b92915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6127db816127a6565b81146127e657600080fd5b50565b6000815190506127f8816127d2565b92915050565b6000806040838503121561281557612814611c64565b5b600061282385828601612791565b9250506020612834858286016127e9565b9150509250929050565b600082825260208201905092915050565b600061285a82612684565b612864818561283e565b935061287481856020860161269a565b61287d81611d0e565b840191505092915050565b600060208201905081810360008301526128a2818461284f565b905092915050565b600281106128bb576128ba612542565b5b50565b60008190506128cc826128aa565b919050565b60006128dc826128be565b9050919050565b6128ec816128d1565b82525050565b600060408201905061290760008301856128e3565b61291460208301846121bf565b9392505050565b600061292682611cd3565b915061293183611cd3565b92508282019050808211156129495761294861261f565b5b92915050565b6000606082019050612964600083018661235f565b61297160208301856121bf565b61297e60408301846121bf565b949350505050565b600061299182611cd3565b915061299c83611cd3565b92508282026129aa81611cd3565b915082820484148315176129c1576129c061261f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a0282611cd3565b9150612a0d83611cd3565b925082612a1d57612a1c6129c8565b5b828204905092915050565b6000612a338261212c565b915060ff8203612a4657612a4561261f565b5b600182019050919050565b6000612a5c82611f91565b9150612a6783611f91565b9250828203905061ffff811115612a8157612a8061261f565b5b92915050565b6000602082019050612a9c60008301846128e3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ad7816123e0565b82525050565b6000612ae98383612ace565b60208301905092915050565b6000602082019050919050565b6000612b0d82612aa2565b612b178185612aad565b9350612b2283612abe565b8060005b83811015612b53578151612b3a8882612add565b9750612b4583612af5565b925050600181019050612b26565b5085935050505092915050565b6000606082019050612b7560008301866121bf565b8181036020830152612b878185612b02565b9050612b9660408301846121bf565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612bc582612b9e565b612bcf8185612ba9565b9350612bdf81856020860161269a565b612be881611d0e565b840191505092915050565b60006040820190508181036000830152612c0d8185612bba565b9050612c1c60208301846121bf565b9392505050565b6000606082019050612c3860008301866121bf565b612c4560208301856123f2565b612c5260408301846121bf565b949350505050565b6000612c6582611f91565b915061ffff8203612c7957612c7861261f565b5b600182019050919050565b6000604082019050612c9960008301856128e3565b612ca66020830184612335565b9392505050565b6000612cb882611cd3565b9150612cc383611cd3565b9250828203905081811115612cdb57612cda61261f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea26469706673582212206b3bfa1e3bf2152e164f0d5c2a59406c69f07c9897bc7b1d7e0865c3f4aaad2a64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createGame(uint256,uint16,uint256,uint8,bytes32)": {
        "params": {
          "coinSide": "predicted coin side by you, the creator",
          "expiryTimestamp": "Expiry timestamp of the game",
          "numberOfPlayers": "number of participating players",
          "proofOfChance": "SHA256 hash of your chance (lucky word[s]) and a random salt combined",
          "wager": "ether value required paticipating players to pay before playing"
        }
      },
      "getServiceProviderWallet()": {
        "details": "Returns the service provider wallet owner"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "playGame(uint256,uint8,bytes32)": {
        "params": {
          "coinSide": "coin side outcome prediction",
          "gameID": "already created game ID",
          "proofOfChance": "SHA256 hash of your chance (lucky word[s]) and a random salt combined"
        }
      },
      "refundExpiredGamePlayersForAllGames(uint256[])": {
        "params": {
          "gameIDs": "game IDs of expired games"
        }
      },
      "revealChancesAndCreditWinners(uint256,bytes[])": {
        "params": {
          "chanceAndSalts": "list of the chance and salts combined in the order of their respecitive play IDs",
          "gameID": "already created game ID"
        }
      },
      "setOperatingStatus(bool)": {
        "details": "Sets contract operations on/off When operational mode is disabled, all write transactions except for this one will fail"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OwnableUnauthorizedAccount(address)": [
        {
          "notice": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "createGame(uint256,uint16,uint256,uint8,bytes32)": {
        "notice": "Creates a new game"
      },
      "playGame(uint256,uint8,bytes32)": {
        "notice": "Allows playing an already created game"
      },
      "refundExpiredGamePlayersForAllGames(uint256[])": {
        "notice": "Batch refunds expired game players"
      },
      "revealChancesAndCreditWinners(uint256,bytes[])": {
        "notice": "Reveals the chances (lucky words) of all plays for a given game. After, it computes and stores the coinflip outcome for the given game. Then, it credits players that predicted the coinflip outcome correctly with the combined wager shared equally (after service charge deduction)"
      },
      "updateMaxNumberOfPlayers(uint16)": {
        "notice": "Updates max number of players to avoid concluding games with very high gas fee"
      },
      "updateMinWagerOfPlayers(uint16)": {
        "notice": "Updates min wager allowed"
      },
      "updateWallets(address)": {
        "notice": "Allow updating Wallets conrtact in case a PPV is ever discovered"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8786,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "playRecord",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint16))"
      },
      {
        "astId": 8790,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "playCounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 8794,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "numberOfPlayersPerGame",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint16)"
      },
      {
        "astId": 8802,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "players",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Side)8759,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 8809,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "coinSideCounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Side)8759,t_uint16))"
      },
      {
        "astId": 8814,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "allPlayers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8820,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "proofOfChances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint16,t_bytes32))"
      },
      {
        "astId": 9181,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "wagers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9051,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "statuses",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_enum(Status)8772)"
      },
      {
        "astId": 9055,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "expiryTimestamps",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9264,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9232,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "operational",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 9367,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "serviceChargePercent",
        "offset": 21,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 8119,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "minWager",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8121,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "maxNumberOfPlayers",
        "offset": 0,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 8123,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "gamesCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8126,
        "contract": "src/Coinflip.sol:Coinflip",
        "label": "wallets",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Wallets)9988"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Wallets)9988": {
        "encoding": "inplace",
        "label": "contract Wallets",
        "numberOfBytes": "20"
      },
      "t_enum(Side)8759": {
        "encoding": "inplace",
        "label": "enum Coin.Side",
        "numberOfBytes": "1"
      },
      "t_enum(Status)8772": {
        "encoding": "inplace",
        "label": "enum Game.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_enum(Side)8759,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Side)8759",
        "label": "mapping(enum Coin.Side => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(Side)8759,t_uint16)": {
        "encoding": "mapping",
        "key": "t_enum(Side)8759",
        "label": "mapping(enum Coin.Side => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_enum(Status)8772)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Game.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)8772"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint16)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Side)8759,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum Coin.Side => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Side)8759,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Side)8759,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum Coin.Side => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Side)8759,t_uint16)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint16,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint16 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes32)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
