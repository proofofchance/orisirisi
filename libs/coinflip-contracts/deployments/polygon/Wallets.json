{
  "address": "0xa56Ae13cecF1ca2bE18e3F5d727b66a2518f63a7",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Credit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Debit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "credit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "creditAccount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "creditAccounts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "manyAccounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountForEachManyAccount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "oneAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountForOneAccount",
          "type": "uint256"
        }
      ],
      "name": "creditManyAndOne",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x082096ac56426095c5295ede9af97a6573aa3bf3e70e8d46d2e0fc9644dedfdc",
  "receipt": {
    "to": null,
    "from": "0x9B54b2B5Acf909692A762f017724a4574d7b6a2a",
    "contractAddress": "0xa56Ae13cecF1ca2bE18e3F5d727b66a2518f63a7",
    "transactionIndex": 27,
    "gasUsed": "463653",
    "logsBloom": "0x
    "blockHash": "0x94ed622971599dd0814ee7af013818fb06c4e3d7ce7f1d6e9b9d35d87d642ea2",
    "transactionHash": "0x082096ac56426095c5295ede9af97a6573aa3bf3e70e8d46d2e0fc9644dedfdc",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 54962835,
        "transactionHash": "0x082096ac56426095c5295ede9af97a6573aa3bf3e70e8d46d2e0fc9644dedfdc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009b54b2b5acf909692a762f017724a4574d7b6a2a",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000043a0de5d5d230b000000000000000000000000000000000000000000000000ae9a86b83caf402e00000000000000000000000000000000000000000002db63d5188d58fbb0d55b000000000000000000000000000000000000000000000000ae56e5d9df521d2300000000000000000000000000000000000000000002db63d55c2e37590df866",
        "logIndex": 79,
        "blockHash": "0x94ed622971599dd0814ee7af013818fb06c4e3d7ce7f1d6e9b9d35d87d642ea2"
      }
    ],
    "blockNumber": 54962835,
    "cumulativeGasUsed": "4559496",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "185fa58ede3fe99bc37a33e385fc080e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Debit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"credit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"creditAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"creditAccounts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"manyAccounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountForEachManyAccount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oneAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountForOneAccount\",\"type\":\"uint256\"}],\"name\":\"creditManyAndOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"creditAccounts(address[])\":{\"details\":\"Credits accounts specified here\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"credit()\":{\"notice\":\"Credits your account.\"},\"creditAccount(address)\":{\"notice\":\"Credits account. You can credit someone using this.\"},\"creditManyAndOne(address[],uint256,address,uint256)\":{\"notice\":\"Same behavior as `creditAccounts` but credits `manyAccounts` using `amountForEachManyAccount` and `oneAccount` using `amountForOneAccount`\"},\"getBalance(address)\":{\"notice\":\"returns the balance of a wallet account\"},\"getTotalBalance()\":{\"notice\":\"returns the balance of this wallet contract in wei\"},\"withdraw(uint256)\":{\"notice\":\"Allows withdrawing a specified amount from your wallet balance\"},\"withdrawAll()\":{\"notice\":\"Allows withdrawing all amount from your wallet balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Wallets.sol\":\"Wallets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    /// The caller account is not authorized to perform an operation.\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    event OwnershipTransferred(\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev The owner is not a valid owner account.\\n    error OwnableInvalidOwner(address owner);\\n\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /// @dev Returns the address of the current owner.\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Internal function without access restriction.\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7ce893c5cfee29e4fc04f2533b3b7cea61489d5be3bf7a38f43fc8fbff691c0f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.25;\\n\\nimport {Ownable} from './Ownable.sol';\\nimport {UsingReentrancyGuard} from './Wallets/ReentrancyGuard.sol';\\n\\ncontract Wallets is UsingReentrancyGuard {\\n    mapping(address account => uint amount) balances;\\n\\n    event Credit(address indexed account, uint amount);\\n    event Debit(address indexed account, uint amount);\\n\\n    error InsufficientFunds();\\n\\n    receive() external payable {\\n        _credit(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Credits account. You can credit someone using this.\\n    function creditAccount(address account) external payable {\\n        _credit(account, msg.value);\\n    }\\n\\n    /// @notice Credits your account.\\n    function credit() external payable {\\n        _credit(msg.sender, msg.value);\\n    }\\n\\n    /// @dev Credits accounts specified here\\n    function creditAccounts(address[] calldata accounts) external payable {\\n        uint amount = msg.value;\\n        uint accountsLength = accounts.length;\\n        require(amount % accountsLength == 0);\\n        uint amountForEachAccount = amount / accountsLength;\\n        for (uint i; i < accountsLength; ) {\\n            _credit(accounts[i], amountForEachAccount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Same behavior as `creditAccounts` but credits\\n    /// `manyAccounts` using `amountForEachManyAccount` and\\n    /// `oneAccount` using `amountForOneAccount`\\n    function creditManyAndOne(\\n        address[] calldata manyAccounts,\\n        uint amountForEachManyAccount,\\n        address oneAccount,\\n        uint amountForOneAccount\\n    ) external payable {\\n        uint manyAccountsLength = manyAccounts.length;\\n        require(\\n            (amountForEachManyAccount * manyAccountsLength) +\\n                amountForOneAccount ==\\n                msg.value\\n        );\\n\\n        for (uint i; i < manyAccountsLength; ) {\\n            _credit(manyAccounts[i], amountForEachManyAccount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _credit(oneAccount, amountForOneAccount);\\n    }\\n\\n    /// @notice Allows withdrawing a specified amount from your wallet balance\\n    function withdraw(uint amount) external nonReentrant {\\n        address account = msg.sender;\\n        uint balance = balances[account];\\n        if (balance < amount) {\\n            revert InsufficientFunds();\\n        }\\n        balances[account] -= amount;\\n\\n        _pay(account, amount);\\n\\n        emit Debit(account, amount);\\n    }\\n\\n    /// @notice Allows withdrawing all amount from your wallet balance\\n    function withdrawAll() external nonReentrant {\\n        address account = msg.sender;\\n        uint balance = balances[account];\\n        if (balance == 0) {\\n            revert InsufficientFunds();\\n        }\\n        balances[account] = 0;\\n\\n        _pay(account, balance);\\n\\n        emit Debit(account, balance);\\n    }\\n\\n    /// @notice returns the balance of a wallet account\\n    function getBalance(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /// @notice returns the balance of this wallet contract in wei\\n    function getTotalBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function _credit(address account, uint amount) private {\\n        balances[account] += amount;\\n        emit Credit(account, amount);\\n    }\\n\\n    function _pay(address to, uint256 amount) private {\\n        (bool sent, ) = to.call{value: amount}('');\\n        require(sent);\\n    }\\n}\\n\",\"keccak256\":\"0x4a53f685c3a0012cd20aa90134133355b52e862b11acb7c902966ec574c3dcf1\",\"license\":\"SEE LICENSE IN LICENSE\"},\"src/Wallets/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.25;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract UsingReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x97c6633025c6aa27818e9f80b6a360e52da44d641f81c63749190339ca696825\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506001600055610708806100246000396000f3fe60806040526004361061007f5760003560e01c8063a06d083c1161004e578063a06d083c146100fe578063caa8cbcb14610106578063dca5d1f814610119578063f8b2cb4f1461012c57600080fd5b806312b58349146100955780632e1a7d4d146100b65780634d4b298e146100d6578063853828b6146100e957600080fd5b366100905761008e3334610162565b005b600080fd5b3480156100a157600080fd5b50475b60405190815260200160405180910390f35b3480156100c257600080fd5b5061008e6100d13660046104db565b6101d1565b61008e6100e4366004610510565b610294565b3480156100f557600080fd5b5061008e61029e565b61008e61034b565b61008e61011436600461057e565b610355565b61008e6101273660046105c0565b6103c4565b34801561013857600080fd5b506100a4610147366004610510565b6001600160a01b031660009081526001602052604090205490565b6001600160a01b0382166000908152600160205260408120805483929061018a90849061063b565b90915550506040518181526001600160a01b038316907f1bbf55d483639f8103dc4e035af71a4fbdb16c80be740fa3eef81198acefa0949060200160405180910390a25050565b6101d9610433565b336000818152600160205260409020548281101561020a5760405163356680b760e01b815260040160405180910390fd5b6001600160a01b03821660009081526001602052604081208054859290610232908490610654565b9091555061024290508284610476565b816001600160a01b03167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc60468460405161027d91815260200190565b60405180910390a250506102916001600055565b50565b6102918134610162565b6102a6610433565b33600081815260016020526040812054908190036102d75760405163356680b760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600160205260408120556102fa8282610476565b816001600160a01b03167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc60468260405161033591815260200190565b60405180910390a250506103496001600055565b565b6103493334610162565b3481610361818361067d565b1561036b57600080fd5b60006103778284610691565b905060005b828110156103bc576103b4868683818110610399576103996106a5565b90506020020160208101906103ae9190610510565b83610162565b60010161037c565b505050505050565b8334826103d183876106bb565b6103db919061063b565b146103e557600080fd5b60005b8181101561042857610420878783818110610405576104056106a5565b905060200201602081019061041a9190610510565b86610162565b6001016103e8565b506103bc8383610162565b60026000540361046f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104c3576040519150601f19603f3d011682016040523d82523d6000602084013e6104c8565b606091505b50509050806104d657600080fd5b505050565b6000602082840312156104ed57600080fd5b5035919050565b80356001600160a01b038116811461050b57600080fd5b919050565b60006020828403121561052257600080fd5b61052b826104f4565b9392505050565b60008083601f84011261054457600080fd5b50813567ffffffffffffffff81111561055c57600080fd5b6020830191508360208260051b850101111561057757600080fd5b9250929050565b6000806020838503121561059157600080fd5b823567ffffffffffffffff8111156105a857600080fd5b6105b485828601610532565b90969095509350505050565b6000806000806000608086880312156105d857600080fd5b853567ffffffffffffffff8111156105ef57600080fd5b6105fb88828901610532565b90965094505060208601359250610614604087016104f4565b949793965091946060013592915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561064e5761064e610625565b92915050565b8181038181111561064e5761064e610625565b634e487b7160e01b600052601260045260246000fd5b60008261068c5761068c610667565b500690565b6000826106a0576106a0610667565b500490565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761064e5761064e61062556fea2646970667358221220be12a8ad8f95b9483b168de7a412ef9834e16296dec68798668d738b3446adb564736f6c63430008190033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063a06d083c1161004e578063a06d083c146100fe578063caa8cbcb14610106578063dca5d1f814610119578063f8b2cb4f1461012c57600080fd5b806312b58349146100955780632e1a7d4d146100b65780634d4b298e146100d6578063853828b6146100e957600080fd5b366100905761008e3334610162565b005b600080fd5b3480156100a157600080fd5b50475b60405190815260200160405180910390f35b3480156100c257600080fd5b5061008e6100d13660046104db565b6101d1565b61008e6100e4366004610510565b610294565b3480156100f557600080fd5b5061008e61029e565b61008e61034b565b61008e61011436600461057e565b610355565b61008e6101273660046105c0565b6103c4565b34801561013857600080fd5b506100a4610147366004610510565b6001600160a01b031660009081526001602052604090205490565b6001600160a01b0382166000908152600160205260408120805483929061018a90849061063b565b90915550506040518181526001600160a01b038316907f1bbf55d483639f8103dc4e035af71a4fbdb16c80be740fa3eef81198acefa0949060200160405180910390a25050565b6101d9610433565b336000818152600160205260409020548281101561020a5760405163356680b760e01b815260040160405180910390fd5b6001600160a01b03821660009081526001602052604081208054859290610232908490610654565b9091555061024290508284610476565b816001600160a01b03167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc60468460405161027d91815260200190565b60405180910390a250506102916001600055565b50565b6102918134610162565b6102a6610433565b33600081815260016020526040812054908190036102d75760405163356680b760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600160205260408120556102fa8282610476565b816001600160a01b03167f59c79d79be0fadf59fe689b6952b7ebe90201a3a1f00d4a31982377890bc60468260405161033591815260200190565b60405180910390a250506103496001600055565b565b6103493334610162565b3481610361818361067d565b1561036b57600080fd5b60006103778284610691565b905060005b828110156103bc576103b4868683818110610399576103996106a5565b90506020020160208101906103ae9190610510565b83610162565b60010161037c565b505050505050565b8334826103d183876106bb565b6103db919061063b565b146103e557600080fd5b60005b8181101561042857610420878783818110610405576104056106a5565b905060200201602081019061041a9190610510565b86610162565b6001016103e8565b506103bc8383610162565b60026000540361046f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104c3576040519150601f19603f3d011682016040523d82523d6000602084013e6104c8565b606091505b50509050806104d657600080fd5b505050565b6000602082840312156104ed57600080fd5b5035919050565b80356001600160a01b038116811461050b57600080fd5b919050565b60006020828403121561052257600080fd5b61052b826104f4565b9392505050565b60008083601f84011261054457600080fd5b50813567ffffffffffffffff81111561055c57600080fd5b6020830191508360208260051b850101111561057757600080fd5b9250929050565b6000806020838503121561059157600080fd5b823567ffffffffffffffff8111156105a857600080fd5b6105b485828601610532565b90969095509350505050565b6000806000806000608086880312156105d857600080fd5b853567ffffffffffffffff8111156105ef57600080fd5b6105fb88828901610532565b90965094505060208601359250610614604087016104f4565b949793965091946060013592915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561064e5761064e610625565b92915050565b8181038181111561064e5761064e610625565b634e487b7160e01b600052601260045260246000fd5b60008261068c5761068c610667565b500690565b6000826106a0576106a0610667565b500490565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761064e5761064e61062556fea2646970667358221220be12a8ad8f95b9483b168de7a412ef9834e16296dec68798668d738b3446adb564736f6c63430008190033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "creditAccounts(address[])": {
        "details": "Credits accounts specified here"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "credit()": {
        "notice": "Credits your account."
      },
      "creditAccount(address)": {
        "notice": "Credits account. You can credit someone using this."
      },
      "creditManyAndOne(address[],uint256,address,uint256)": {
        "notice": "Same behavior as `creditAccounts` but credits `manyAccounts` using `amountForEachManyAccount` and `oneAccount` using `amountForOneAccount`"
      },
      "getBalance(address)": {
        "notice": "returns the balance of a wallet account"
      },
      "getTotalBalance()": {
        "notice": "returns the balance of this wallet contract in wei"
      },
      "withdraw(uint256)": {
        "notice": "Allows withdrawing a specified amount from your wallet balance"
      },
      "withdrawAll()": {
        "notice": "Allows withdrawing all amount from your wallet balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1698,
        "contract": "src/Wallets.sol:Wallets",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1378,
        "contract": "src/Wallets.sol:Wallets",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}