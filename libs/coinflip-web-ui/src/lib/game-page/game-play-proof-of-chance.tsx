import { RevealedProofOfChance } from '@orisirisi/proof-of-chance';
import { shortenPublicAddress } from '../data-utils';
import { DocumentIcon } from '@heroicons/react/24/solid';
import { atom, useAtom } from 'jotai';
import { Modal } from '../modals';
import { DocumentDuplicateIcon } from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

export function UnrevealedGamePlayProofOfChance({
  playerAddress,
  ...rest
}: {
  playerAddress: string;
} & {
  [key: `data-${string}`]: unknown;
}) {
  return (
    <div
      className="flex flex-col items-center cursor-not-allowed opacity-70"
      {...rest}
    >
      <DocumentIcon className="text-gray-400 h-20 hover:h-24 transition duration-150 ease-in-out" />
      <span className="text-xs">
        {shortenPublicAddress(playerAddress)}'s proof
      </span>
    </div>
  );
}

export function RevealedGamePlayProofOfChance({
  gameId,
  proofOfChance,
}: {
  gameId: number;
  proofOfChance: RevealedProofOfChance;
}) {
  const { openModal } = useGamePlayProofModal();

  return (
    <div className="flex flex-col items-center cursor-pointer">
      <DocumentIcon
        onClick={() => openModal(proofOfChance)}
        style={{
          color: proofOfChance.getColor(gameId),
        }}
        className="h-20 hover:h-24 transition duration-150 ease-in-out"
      />
      <span className="text-xs">
        {shortenPublicAddress(proofOfChance.player_address)}'s proof
      </span>
    </div>
  );
}

const gamePlayProofModal = atom<RevealedProofOfChance | null>(null);
function useGamePlayProofModal() {
  const [proof, setProof] = useAtom(gamePlayProofModal);
  const openModal = (proof: RevealedProofOfChance) => setProof(proof);
  const closeModal = () => setProof(null);
  return {
    showModal: !!proof,
    proof,
    openModal,
    closeModal,
  };
}
export function GamePlayProofModal() {
  const { showModal, proof, closeModal } = useGamePlayProofModal();

  if (!proof) return null;

  return (
    <Modal
      className="top-[90px] w-[400px] left-[calc(50vw-200px)]"
      title={`${shortenPublicAddress(proof.player_address)}'s Proof Of Chance`}
      show={showModal}
      close={closeModal}
    >
      <div className="flex flex-col mt-4 mb-4">
        <p>
          This player's chance (lucky words) used together with others for the
          computing coinflip outcome is:{' '}
          <b className="text-lg">{proof.chance}</b>
          <SmallCopyButton copyText={proof.chance} />
        </p>
        <br />
        <br />
        <h4 className="text-lg font-semibold">Cryptography Detail</h4>
        <div className="text-sm">
          <p className="mt-2">
            - Random salt generated by player's computer is:{' '}
            <b className="text-lg">{proof.salt}</b>{' '}
            <SmallCopyButton copyText={proof.salt} />. This prevents guessing
            the player's chance (lucky words).
          </p>
          <p className="mt-4 break-words">
            - For EVM reasons, before generating the proof of chance, we ABI
            encode the chance and salt with{' '}
            <a
              href="https://github.com/proofofchance/orisirisi/blob/main/libs/proof-of-chance/src/lib/proof-of-chance.ts#L115"
              target="_blank"
              rel="noreferrer"
              className="underline"
            >
              this function
            </a>
            . This outputs: <b>{proof.getChanceAndSalt()}</b>
            <SmallCopyButton copyText={proof.getChanceAndSalt()} />
          </p>
          <p className="mt-4 break-words">
            - As shown in the player's play activity, this player played with a
            proof of chance: <b>{proof.proof_of_chance}</b>{' '}
            <SmallCopyButton copyText={proof.proof_of_chance} />, the SHA256
            hash of the hexadecimal chance and salt (from above).
          </p>
        </div>
      </div>
    </Modal>
  );
}

function SmallCopyButton({
  copyText,
  afterCopyMessage = 'Copied successfully!',
}: {
  copyText: string;
  afterCopyMessage?: string;
}) {
  const copy = async () => {
    await navigator.clipboard.writeText(copyText);

    toast.success(afterCopyMessage, {
      position: 'bottom-center',
    });
  };

  return (
    <div onClick={copy} className="inline-block cursor-pointer">
      <DocumentDuplicateIcon className="h-4 w-4 relative top-[2px]" />
    </div>
  );
}
